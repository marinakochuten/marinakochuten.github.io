[
  {
    "objectID": "posts.html",
    "href": "posts.html",
    "title": "blog",
    "section": "",
    "text": "Visualizing the 2017 Thomas Fire: A Python Analysis\n\n\n\nJupyter\n\n\nMEDS\n\n\nPython\n\n\n\nUsing AQI data and false color imagery to visualize the effects of the Thomas Fire on Santa Barbara county\n\n\n\nMarina Kochuten\n\n\nDec 12, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nChinook Salmon Harvest\n\n\n\nQuarto\n\n\nMEDS\n\n\n\n\n\n\n\nMarina Kochuten\n\n\nDec 12, 2024\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "marina kochuten",
    "section": "",
    "text": "hi!\nI’m Marina. Currently, I am a Masters student in Environmental Data Science at UCSB’s Bren School of Environmental Science & Resource Management. As an emerging data scientist, I am constantly curious, creative, and eager to apply my newly developed skills to ecology and conservation. Outside of my work, you can find me cooking a fresh vegetarian meal, enjoying all things outdoors, and hanging with my pup Tahoma. Poke around my site to learn more about me and my work!\n\n\neducation\nMaster of Environmental Data Science (Expected June 2024)\n\nBren School of Environmental Science & Management | University of California, Santa Barbara (UCSB)\n\nBachelor of Science in Environmental Science & Resource Management (December 2019)\n\nUniversity of Washington (UW), Seattle, WA\nStudy Abroad: Council on International Educational Exchange, Tropical Ecology & Conservation, Costa Rica (January – May 2019)"
  },
  {
    "objectID": "blog-posts/thomas-blog/index.html",
    "href": "blog-posts/thomas-blog/index.html",
    "title": "Visualizing the 2017 Thomas Fire: A Python Analysis",
    "section": "",
    "text": "The Thomas Fire, which burned over 280,000 acres in Ventura and Santa Barbara counties in December 2017, was one of California’s largest wildfires at the time. It caused widespread ecological damage, displaced communities, and left lasting environmental impacts.\nUsing NASA’s Landsat data and California Fire Perimeter data, I create a map that visualizes the extent of the Thomas Fire. In conjunction, I use Air Quality Index (AQI) data from the Environmental Protection Agency (EPA) to visualize the AQI surrounding the fire. Together, these visualizations showcase the impact that the Thomas Fire had on the community.\n\n\n\n\n\n\n\n\n\n\n\n\nFor the full analysis, see my GitHub repository.\n\n\n\nRaster manipulation using rioxarray\nVector data manipulation using GeoPandas\nFalse color imagery to highlight wildfire impact\nData visualization with matplotlib\n\n\n\n\nLandsat: I use a simplified collection of bands (red, green, blue, near-infrared and shortwave infrared) from the Landsat Collection 2 Level-2 atmosperically corrected surface reflectance data, collected by the Landsat 8 satellite. The data was retrieved from the Microsoft Planetary Computer data catalogue and pre-processed to remove data outside land and coarsen the spatial resolution. This data is intended for visualization and educational purposes only.\n\nCitation: Microsoft Planetary Computer data catalogue (2024), Landsat Collection 2 Level-2 (simplified) [Data set] Available from: https://planetarycomputer.microsoft.com/dataset/landsat-c2-l2. Access date: November 18, 2024.\n\nFire perimeters: I use California Fire Perimeter data from the State of California’s Data Catalog to subset to the Thomas Fire boundary. In this analysis, I will be using the file that I created from the full dataset. The dataset is updated annually and includes fire perimeters dating back to 1878.\n\nCitation: State of California Data Catalog (2024), California Fire Perimeters (all) [Data set] Available from: https://catalog.data.gov/dataset/california-fire-perimeters-all-b3436. Access date: November 18, 2024.\n\nAir Quality Index (AQI): The EPA’s AirData tool has pre-generated files of data available for download. The files are updated twice per year: once in June to capture the complete data for the prior year and once in December to capture the data for the summer. AQI is calculated each day for each monitor for the Criteria Gases and PM10 and PM2.5. For this analysis, I use two files, one containing daily AQI data for 2017 and one for 2018.\n\nCitation: Environmental Protection Agency AirData (2024), Daily AQI by County [Data Set] Available from: https://www.epa.gov/outdoor-air-quality-data/download-daily-data. Access date: October 20, 2024."
  },
  {
    "objectID": "blog-posts/thomas-blog/index.html#about",
    "href": "blog-posts/thomas-blog/index.html#about",
    "title": "Visualizing the 2017 Thomas Fire: A Python Analysis",
    "section": "",
    "text": "The Thomas Fire, which burned over 280,000 acres in Ventura and Santa Barbara counties in December 2017, was one of California’s largest wildfires at the time. It caused widespread ecological damage, displaced communities, and left lasting environmental impacts.\nUsing NASA’s Landsat data and California Fire Perimeter data, I create a map that visualizes the extent of the Thomas Fire. In conjunction, I use Air Quality Index (AQI) data from the Environmental Protection Agency (EPA) to visualize the AQI surrounding the fire. Together, these visualizations showcase the impact that the Thomas Fire had on the community.\n\n\n\n\n\n\n\n\n\n\n\n\nFor the full analysis, see my GitHub repository.\n\n\n\nRaster manipulation using rioxarray\nVector data manipulation using GeoPandas\nFalse color imagery to highlight wildfire impact\nData visualization with matplotlib\n\n\n\n\nLandsat: I use a simplified collection of bands (red, green, blue, near-infrared and shortwave infrared) from the Landsat Collection 2 Level-2 atmosperically corrected surface reflectance data, collected by the Landsat 8 satellite. The data was retrieved from the Microsoft Planetary Computer data catalogue and pre-processed to remove data outside land and coarsen the spatial resolution. This data is intended for visualization and educational purposes only.\n\nCitation: Microsoft Planetary Computer data catalogue (2024), Landsat Collection 2 Level-2 (simplified) [Data set] Available from: https://planetarycomputer.microsoft.com/dataset/landsat-c2-l2. Access date: November 18, 2024.\n\nFire perimeters: I use California Fire Perimeter data from the State of California’s Data Catalog to subset to the Thomas Fire boundary. In this analysis, I will be using the file that I created from the full dataset. The dataset is updated annually and includes fire perimeters dating back to 1878.\n\nCitation: State of California Data Catalog (2024), California Fire Perimeters (all) [Data set] Available from: https://catalog.data.gov/dataset/california-fire-perimeters-all-b3436. Access date: November 18, 2024.\n\nAir Quality Index (AQI): The EPA’s AirData tool has pre-generated files of data available for download. The files are updated twice per year: once in June to capture the complete data for the prior year and once in December to capture the data for the summer. AQI is calculated each day for each monitor for the Criteria Gases and PM10 and PM2.5. For this analysis, I use two files, one containing daily AQI data for 2017 and one for 2018.\n\nCitation: Environmental Protection Agency AirData (2024), Daily AQI by County [Data Set] Available from: https://www.epa.gov/outdoor-air-quality-data/download-daily-data. Access date: October 20, 2024."
  },
  {
    "objectID": "blog-posts/thomas-blog/index.html#mapping-the-fire",
    "href": "blog-posts/thomas-blog/index.html#mapping-the-fire",
    "title": "Visualizing the 2017 Thomas Fire: A Python Analysis",
    "section": "Mapping the fire",
    "text": "Mapping the fire\n\nSetup\nTo start, I set up my analysis by loading all necessary libraries and data files.\n\n# Libraries for general analysis\nimport numpy as np\nimport pandas as pd\n\n# Libraries for geospatial data\nimport geopandas as gpd\nimport rioxarray as rioxr\n\n# Libraries for plotting\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as mpatches                # For creating custom legend\nfrom matplotlib_scalebar.scalebar import ScaleBar    # For adding scalebar \n\n# Import Landsat data\nlandsat = rioxr.open_rasterio('data/landsat8-2018-01-26-sb-simplified.nc')\n\n# Import California fire perimeters\nthomas_fire = gpd.read_file('data/thomas_fire_boundary.geojson')\n\n\n\nPrepare Data\nNow, I need to prepare the Landsat data. For processing the Landsat data, I will be primarily working with the rioxarray package. rioxarray is an extension of xarray that focuses on geospatial raster data. By loading the Landsat data in using rioxarray, I load the file as an xarray.Dataset, an object that includes both the raster data and the associated geospatial metadata, including CRS, affine transformations, and spatial coordinates.\n\n# Look at the Landsat raster\nlandsat\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt; Size: 25MB\nDimensions:      (band: 1, x: 870, y: 731)\nCoordinates:\n  * band         (band) int64 8B 1\n  * x            (x) float64 7kB 1.213e+05 1.216e+05 ... 3.557e+05 3.559e+05\n  * y            (y) float64 6kB 3.952e+06 3.952e+06 ... 3.756e+06 3.755e+06\n    spatial_ref  int64 8B 0\nData variables:\n    red          (band, y, x) float64 5MB ...\n    green        (band, y, x) float64 5MB ...\n    blue         (band, y, x) float64 5MB ...\n    nir08        (band, y, x) float64 5MB ...\n    swir22       (band, y, x) float64 5MB ...xarray.DatasetDimensions:band: 1x: 870y: 731Coordinates: (4)band(band)int641array([1])x(x)float641.213e+05 1.216e+05 ... 3.559e+05axis :Xcrs :EPSG:32611long_name :x coordinate of projectionresolution :30standard_name :projection_x_coordinateunits :metre_FillValue :nanarray([121305., 121575., 121845., ..., 355395., 355665., 355935.])y(y)float643.952e+06 3.952e+06 ... 3.755e+06axis :Ycrs :EPSG:32611long_name :y coordinate of projectionresolution :-30standard_name :projection_y_coordinateunits :metre_FillValue :nanarray([3952395., 3952125., 3951855., ..., 3755835., 3755565., 3755295.])spatial_ref()int640crs_wkt :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984projected_crs_name :WGS 84 / UTM zone 11Ngrid_mapping_name :transverse_mercatorlatitude_of_projection_origin :0.0longitude_of_central_meridian :-117.0false_easting :500000.0false_northing :0.0scale_factor_at_central_meridian :0.9996spatial_ref :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]GeoTransform :121170.0 270.0 0.0 3952530.0 0.0 -270.0array(0)Data variables: (5)red(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]green(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]blue(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]nir08(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]swir22(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]Indexes: (3)bandPandasIndexPandasIndex(Index([1], dtype='int64', name='band'))xPandasIndexPandasIndex(Index([121305.0, 121575.0, 121845.0, 122115.0, 122385.0, 122655.0, 122925.0,\n       123195.0, 123465.0, 123735.0,\n       ...\n       353505.0, 353775.0, 354045.0, 354315.0, 354585.0, 354855.0, 355125.0,\n       355395.0, 355665.0, 355935.0],\n      dtype='float64', name='x', length=870))yPandasIndexPandasIndex(Index([3952395.0, 3952125.0, 3951855.0, 3951585.0, 3951315.0, 3951045.0,\n       3950775.0, 3950505.0, 3950235.0, 3949965.0,\n       ...\n       3757725.0, 3757455.0, 3757185.0, 3756915.0, 3756645.0, 3756375.0,\n       3756105.0, 3755835.0, 3755565.0, 3755295.0],\n      dtype='float64', name='y', length=731))Attributes: (0)\n\n\nTaking a look at the Landsat raster, I notice that we have a dimension named band that contains only one layer.\nUsing squeeze() and drop_vars(), I drop this unnecessary band dimension and it’s associated coordinates, resulting in a simpler, 2-dimensional raster. This will make plotting easier down the line.\n\n# Drop redundant band dimension\nlandsat = landsat.squeeze().drop_vars('band')\n\nNow, the Landsat raster is ready to be plotted.\nTo accentuate the Thomas fire scar, I overlay the Landsat raster with a polygon representing the perimeter of the Thomas Fire. In my full analysis, I prepared the California fire perimeter data by creating a new geospatial object containing only the Thomas Fire perimeter and saved it as thomas_fire_boundary.geojson. When manipulating the fire perimeter data, I used GeoPandas. Building off of the pandas.DataFrame, the core data structure in GeoPandas is the geopandas.GeoDataFrame, which can store geometry columns and perform spatial operations!\nI knew that the California fire perimeter data contains the columns YEAR_ and FIRE_NAME, which were useful for subsetting to the 2017 Thomas Fire. Since geopandas.GeoDataFrames are pandas.DataFrames at their core, I used basic dataframe subsetting to pull out the area of interest.\nFor the purposes of this post, I have only included my subset file. For the full analysis, see my GitHub repository.\n\n\nPlot the Landsat raster using false color and the Thomas Fire perimeter to highlight the extent of the burn\nRemote sensing instruments collect data from wavelengths both within and outside of the visible spectrum. False color imagery uses these non-visible wavelengths to reveal unique aspects that may not be visible otherwise. False color imagery has a wide range of applications, including acting as a useful tool for monitoring wildfire impacts. By assigning infrared bands to visible colors, these images highlight vegetation health, burn severity, and the extent of fire scars.\nIn this case, I use false color imagery to highlight the 2017 Thomas Fire’s burn scar. I use Landsat’s shortwave infrared as red, near infrared as green, and green bands as blue to visualize the burn. Newly burned land reflects strongly in SWIR bands, making the burn scar appear red in my map. The bright green shows vegetation, as it reflects near infrared light very strongly.\nTo do so, I select the shortwave infrared, near infrared, and red variables, convert to array, and plot. By setting the parameter robust = True in the imshow() method, I adjust the display of the image to handle color scaling appropriately by ignoring the outlier RBG values caused by clouds. It fixes contrast issues that cause images to appear bright white.\n\n\nShow code for the false color image\n# Before two spatial object can interact, I must match the CRSs\nthomas_fire = thomas_fire.to_crs(landsat.rio.crs)\nassert thomas_fire.crs == landsat.rio.crs\n\n# Create an object containing the aspect ratio for the landsat map\nratio = landsat.rio.width / landsat.rio.height\n\n# Initialize plot\nfig, ax = plt.subplots(figsize = (9, 9 * ratio))  # Update figure size and aspect\n\n# Remove axis for cleaner map\nax.axis('off')\n\n# Plot false color image highlighting the burn scar\nlandsat[['swir22', 'nir08', 'red']].to_array().plot.imshow(robust = True, ax = ax, zorder = 1)\n\n# Add custom legend items for false color image bands\nlegend_swir = mpatches.Patch(color = \"#FA957D\", label = 'Shortwave Infrared (SWIR) \\n - Burned Area')\nlegend_nir = mpatches.Patch(color = \"#62DF59\", label = 'Near Infrared \\n - Vegetation')\n\n# Add legend\nax.legend(handles = [legend_swir, legend_nir], loc = 'upper right', fontsize = 10)\n\n# Add Thomas Fire perimeter\nthomas_fire.plot(ax = ax, \n                 edgecolor = 'firebrick',\n                 color = 'none',\n                 linewidth = 2,\n                 zorder = 2,\n                 legend = True)\n\n# Add fire perimeter label\nax.text(x = 291870, y = 3831700,         # Position coordinates\n        s = \"Thomas Fire \\n Perimeter\",  # Label text\n        fontsize = 10, \n        weight = 'bold',\n        color = 'firebrick',\n        bbox = dict(facecolor = 'white', edgecolor = 'firebrick', alpha = 0.8, pad = 4))   # Box behind text for visibility\n\n# Add plot title\nax.set_title('2017 Thomas Fire (California) Burn Scar using False Color Imagery', fontsize = 16)\n\n# Add scale bar \nscalebar = ScaleBar(1, units='m', location='lower left', length_fraction=0.25, color='black')  \nax.add_artist(scalebar)\n\n# Display the plot\nplt.show()\n\n\n\n\n\n\n\n\n\nThis false color image uses the shortwave infrared and near infrared to easily visualize bare ground / burned areas (shown in red) and vegetation (shown in bright green)."
  },
  {
    "objectID": "blog-posts/thomas-blog/index.html#visualizing-aqi",
    "href": "blog-posts/thomas-blog/index.html#visualizing-aqi",
    "title": "Visualizing the 2017 Thomas Fire: A Python Analysis",
    "section": "Visualizing AQI",
    "text": "Visualizing AQI\nNow that I have a map highlighting the extent of the fire, I will make a supplimentary visualization showcasing the AQI surrounding the event. The U.S. Air Quality Index (AQI) is EPA’s tool for communicating about outdoor air quality and health. The AQI includes six categories, each corresponding to a range of index values. The higher the AQI value, the greater the level of air pollution and the greater the health concern. For example, an AQI value of 50 or below represents good air quality, while an AQI value over 300 represents hazardous air quality.\nFor this, I create a line plot showing both the daily AQI and the 5-day average in Santa Barbara County in 2017 and 2018.\n\nSetup\nFirst, I need to download the AQI data. I am accessing the data straight from its its ZIP file link, so I use the pd.read_csv function with the compression='zip' parameter added.\n\n# Load in county level AQI data from 2017 and 2018\naqi = pd.concat([pd.read_csv('https://aqs.epa.gov/aqsweb/airdata/daily_aqi_by_county_2017.zip',\n                             compression = 'zip'),\n                 pd.read_csv('https://aqs.epa.gov/aqsweb/airdata/daily_aqi_by_county_2018.zip',\n                            compression = 'zip')])\n\n\n\nPrepare data\nNext, I will tidy the data frame by converting the column names to lower snake case, subsetting to Santa Barbara county, and changing the data type of the date column to datetime.\n\n# Convert column names to lower snake case\naqi.columns = (aqi.columns\n                  .str.lower()\n                  .str.replace(' ','_'))\n\n# Make new data frame containing only AQI data for Santa Barbara County\naqi_sb = ((aqi[aqi['county_name'] == \"Santa Barbara\"])\n          .drop(columns = ['state_name', 'county_name', 'state_code', 'county_code'])\n         )\n\n# Convert date column to datetime object and set as the index\naqi_sb.date = pd.to_datetime(aqi_sb.date)\naqi_sb = aqi_sb.set_index('date')\n\n\n\nPlot daily AQI against the 5-day average AQI from 2017-2018\nRolling averages make it easy to identify short-term trends by smoothing out daily fluctuations. pandas makes calculating rolling averages very simple with the pandas.DataFrame.rolling() method. Since I already have a datetime column in my dataframe that includes day, I can pass the argument window = '5D' to .rolling() to specify a 5-day window, that I can then chain mean() to get the 5-day average!\n\n# Add new column containing a rolling 5-day AQI average\naqi_sb['five_day_average'] = aqi_sb['aqi'].rolling(window = '5D').mean()\n\nNow, I am ready to create the AQI plot.\n\n\nShow code for the AQI plot\n# Plot daily AQI against 5-day average ----\n\n# Initialize figure\nfig, ax = plt.subplots(figsize=(9,5))\n\n# Add daily and 5-day average AQI\naqi_sb.five_day_average.plot(ax=ax, color = 'firebrick', zorder = 3)\naqi_sb.aqi.plot(ax=ax, color = 'cornflowerblue', zorder = 2)\n\n# Add AQI labels for unhealthy levels\nax.axhspan(150, 151.5, facecolor = \"dimgrey\", alpha = 0.8)\nax.text(x = pd.to_datetime('2017-01-10'), y = 155, s = 'Unhealthy', color = 'dimgrey')\nax.axhspan(200, 202, facecolor = \"dimgrey\", alpha = 0.8)\nax.text(x = pd.to_datetime('2017-01-10'), y = 205, s = 'Very Unhealthy', color = 'dimgrey')\nax.axhspan(300, 301, facecolor = \"dimgrey\", alpha = 0.8)\nax.text(x = pd.to_datetime('2017-01-10'), y = 305, s = 'Hazardous', color = 'dimgrey')\n\n# Update axis labels and title\nplt.xlabel('Date')\nplt.ylabel('AQI')\nplt.title('AQI during the 2017 Thomas Fire in Santa Barbara County')\n\n# Add legend\nax.legend(labels = ['Daily AQI', '5-day average AQI'])\n\n# Add label indicating the Thomas Fire\nax.axvline(x = pd.to_datetime('2017-12-01'), color = 'dimgrey', linestyle = 'dashed')\nax.text(x = pd.to_datetime('2017-08-25'), y = 255, s = 'Thomas Fire', color = 'dimgrey')\n\n# Update grid lines\nax.grid(axis = 'y', linewidth = 0.2)\n\nplt.show()"
  },
  {
    "objectID": "blog-posts/thomas-blog/index.html#conclusion",
    "href": "blog-posts/thomas-blog/index.html#conclusion",
    "title": "Visualizing the 2017 Thomas Fire: A Python Analysis",
    "section": "Conclusion",
    "text": "Conclusion\nFor this analysis, I bring my newly aquired skills working with tabular and spatial data in Python together to visualize the impact of the 2017 Thomas Fire on Santa Barbara county. Using false color imagery, I highlight the burn scar. Then, I use daily AQI data to create a plot that accompanies the burn scar map."
  }
]