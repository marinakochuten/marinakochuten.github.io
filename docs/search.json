[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "about",
    "section": "",
    "text": "My passion for ecology stems from my heritage. I am mixed-Indigenous Unangax̂ raised on Coast Salish lands in Northwestern Washington State, a community at the forefront of climate change adaptation. My appreciation for nature undoubtedly grew from the beauty and cultural significance of my homelands.\n\n\n\n\n\n\n\n\n\n\n\n\nData collection in Monteverde, Costa Rica\n\nIn undergrad, I earned a BS in Environmental Science and Resource Management from the University of Washington (2019). Members of my community taught me early on the importance of environmental problem solving and in many ways, my chosen career path is how I continue our legacy of indigenous stewardship.\nBy nature, I am an enthusiastic puzzle solver. At the intersection of data science and environmental science, I aim to leverage my solution-oriented mindset, analytical skills, and data-driven approaches to tackle complex environmental challenges, drive meaningful change, promote inclusivity and representation in STEM, and contribute to a more sustainable future for all.\n\n\n\n\n\n\n\n\n\n\n\n\nRare plant monitoring in Olympic National Park\n\n\n\n\nMy undergraduate research included work with UW’s hydro-biogeochemistry lab studying methane emissions from permafrost thaw bogs, and a capstone project conducted in Costa Rica’s cloud forest examining the relationship between mycorrhizal abundance and soil organic carbon. After graduation, I worked alongside the National Parks Service as a field ecologist with UW Botanic Gardens’ RareCare program. My small team and I utilized GIS and field techniques to establish long-term monitoring plots for rare and endangered alpine plants throughout Washington’s Olympic and North Cascades National Parks.\nAs a graduate student, I am growing exponentially both personally and professionally. I am enjoying developing my coding skills, mostly in R and Python, and learning how my diverse experiences uniquely qualify me for environmental problem solving. The work is tough, and I am absolutely loving every minute of it.\n\n\n\n\n\n\n\n\n\n\n\n\nMy second home (on-wheels), Trashcan the Van, parked among the Giant Cardons in Baja, MX\n\nTake a look at my work to see recent projects that I’ve been working on.\n\n\n\nWhen my head is not buried in code, you can find me pursuing my many other interests:\n\n\n\n\n\n\n\n\n\n\n\n\nI love taking inspiration from my surroundings for bead project color palettes! These became Tse’Bii’Ndzisgaii (Monument Valley, UT) inspired earrings\n\n\nIndoors, I will probably be bead weaving, cooking, or re-reading my all time favorite book (Braiding Sweetgrass by Robin Wall Kimmerer)\nOutdoors, you can catch me biking, hiking, climbing, swimming in all the alpine lakes, and snowboarding like an amateur\nOtherwise, find me tinkering on the pet project, my self-built campervan (aka, Trashcan the Van). In 2021 I converted an empty cargo van into a cozy, off-grid, home on wheels with no experience and very limited tools. I’m pretty dang proud of the thing, and my dog Tahoma and I have taken Trashcan over 10,000 miles, traveled to 30 states, and 3 countries. Let me know if you’d like to chat DIY solar systems, woodworking tips, or road-trip planning Face Smile"
  },
  {
    "objectID": "about.html#the-lore",
    "href": "about.html#the-lore",
    "title": "about",
    "section": "",
    "text": "My passion for ecology stems from my heritage. I am mixed-Indigenous Unangax̂ raised on Coast Salish lands in Northwestern Washington State, a community at the forefront of climate change adaptation. My appreciation for nature undoubtedly grew from the beauty and cultural significance of my homelands.\n\n\n\n\n\n\n\n\n\n\n\n\nData collection in Monteverde, Costa Rica\n\nIn undergrad, I earned a BS in Environmental Science and Resource Management from the University of Washington (2019). Members of my community taught me early on the importance of environmental problem solving and in many ways, my chosen career path is how I continue our legacy of indigenous stewardship.\nBy nature, I am an enthusiastic puzzle solver. At the intersection of data science and environmental science, I aim to leverage my solution-oriented mindset, analytical skills, and data-driven approaches to tackle complex environmental challenges, drive meaningful change, promote inclusivity and representation in STEM, and contribute to a more sustainable future for all.\n\n\n\n\n\n\n\n\n\n\n\n\nRare plant monitoring in Olympic National Park"
  },
  {
    "objectID": "about.html#the-work",
    "href": "about.html#the-work",
    "title": "about",
    "section": "",
    "text": "My undergraduate research included work with UW’s hydro-biogeochemistry lab studying methane emissions from permafrost thaw bogs, and a capstone project conducted in Costa Rica’s cloud forest examining the relationship between mycorrhizal abundance and soil organic carbon. After graduation, I worked alongside the National Parks Service as a field ecologist with UW Botanic Gardens’ RareCare program. My small team and I utilized GIS and field techniques to establish long-term monitoring plots for rare and endangered alpine plants throughout Washington’s Olympic and North Cascades National Parks.\nAs a graduate student, I am growing exponentially both personally and professionally. I am enjoying developing my coding skills, mostly in R and Python, and learning how my diverse experiences uniquely qualify me for environmental problem solving. The work is tough, and I am absolutely loving every minute of it.\n\n\n\n\n\n\n\n\n\n\n\n\nMy second home (on-wheels), Trashcan the Van, parked among the Giant Cardons in Baja, MX\n\nTake a look at my work to see recent projects that I’ve been working on."
  },
  {
    "objectID": "about.html#the-play",
    "href": "about.html#the-play",
    "title": "about",
    "section": "",
    "text": "When my head is not buried in code, you can find me pursuing my many other interests:\n\n\n\n\n\n\n\n\n\n\n\n\nI love taking inspiration from my surroundings for bead project color palettes! These became Tse’Bii’Ndzisgaii (Monument Valley, UT) inspired earrings\n\n\nIndoors, I will probably be bead weaving, cooking, or re-reading my all time favorite book (Braiding Sweetgrass by Robin Wall Kimmerer)\nOutdoors, you can catch me biking, hiking, climbing, swimming in all the alpine lakes, and snowboarding like an amateur\nOtherwise, find me tinkering on the pet project, my self-built campervan (aka, Trashcan the Van). In 2021 I converted an empty cargo van into a cozy, off-grid, home on wheels with no experience and very limited tools. I’m pretty dang proud of the thing, and my dog Tahoma and I have taken Trashcan over 10,000 miles, traveled to 30 states, and 3 countries. Let me know if you’d like to chat DIY solar systems, woodworking tips, or road-trip planning Face Smile"
  },
  {
    "objectID": "blog-posts/chinook-harvest/index.html",
    "href": "blog-posts/chinook-harvest/index.html",
    "title": "Chinook Salmon Harvest",
    "section": "",
    "text": "In the Aleutians, summer is the highly anticipated “Sockeye (aanux̂)1 Season”. For many of the Indigenous (Unangan) residents, fishing is not only a way to make a living - it is the way to live. Fishing provides income, food to sustain a family for the year, and cultural connection to our land, community, and ancestors.\n\n\n\n\n\n\n\n\n\n\n\n\nJars of salmon were a regular find in my care packages.\nPhoto credits: Danielle Ringer\n\nFor me, fall is the highly anticipated “Care Package Season”. When there is enough, my family always shares (udigdada) the bounty. Down in the mainland, annual care packages filled with Alaska’s summer harvests keep me connected to my Aleutian family and culture. Salmonberry (alagnax̂) and mossberry (qaayux̂) jelly, pickled putchkis (saaqudax̂), dried salmon and halibut (udax̂), smoked salmon (qam dimiĝii), and if I’m lucky caribou (itx̂ayax̂) are tastes of home in the Aleutians delivered to me in the Pacific Northwest. We turn these ingredients into traditional dishes like fish pie (piruugax̂) and stewed caribou and gravy over rice (Aluutagaaq), and we make fry bread (alaadikax̂) to go along with them. While Salmon is abundant in these gifts, the prized Chinook (chaguchax̂) rarely makes its way to us down south.\nBecause of my Aleutian ties, I am innately curious about human-salmon systems. Sam Cisk, data science educator (and mentor for building this website), pointed me towards the State of Alaska People and Salmon Project (SASAP). The project included an NCEAS working group data team, and they published open-source, up-to-date datasets regarding people and salmon throughout Alaska. I think that this project was wildly cool, and work like this is what keeps me inpired while pursuing an environmental data science career!\nIn this analysis for my final project for EDS 222 - Statistics for Environmental Data Science, I use a SASAP dataset to explore the relationship between fishing sector and harvest of the beloved Chinook salmon. Read on to learn more about my analysis, or see my GitHub repository!\n\n\n\n\n\n\n\n\n\n\n\n\nScenery in the Aleutians. Photo credits: Aleutian Island Waterfowlers\n\nSalmon are crucial to the health and cultural wellbeing of Aleut/Unangan communities along the eastern Aleutians and Alaskan Peninsula. Of the 5 Pacific salmon species, Chinook salmon hold particular cultural significance. They are also the largest, and fetch one of the highest values per pound on the commercial market 2.\nFor Aleutian communities, there is very little separation between commercial and subsistence fishing activities. Often, subsistence fish are retained to fill freezers as “homepack” from commercial harvests 3. This makes understanding participation in these fishing sectors very complex.\nThe State of Alaska Salmon and People Project (SASAP) is a collaboration of Indigenous and non-Indigenous researchers, scholars and community leaders working to produce and share integrated, accurate, and up-to-date information on Alaska’s salmon and people systems. They compiled 125 data sets into an open-source data portal that makes relevant salmon information accessible and usable by Alaskans wishing to advocate on their own behalf for a better salmon future. In recognition of the complex relationship between commercial and subsistence harvests, they uniquely derive estimated subsistence harvest from a combination of subsistence permit returns and post-season household survey data.\nUsing their dataset, Harvest of Salmon across Commercial, Subsistence, Personal Use, and Sport Fish sectors, Alaska, 1995-2016, I aim to explore how Chinook salmon harvest varies between commercial and subsistence fishing sectors.\n\n\n\nI am using a dataset from the SASAP data portal that counts harvest of the 5 Pacific salmon species across fishing sectors in Alaska from 1995-2016. The time range for the data starts in 1975, but it isn’t until 1995 that we see all 4 sectors represented in the data.\n\nAccess: https://knb.ecoinformatics.org/view/doi%3A10.5063%2FF1HM56Q3\nFile: Harvest_All_Sectors.csv\nCitation: Jeanette Clark, & Alaska Department Fish Game, Division Commercial Fisheries Alaska Department Fish Game, Division Sport Fish Alaska Department Fish Game, Division of and of of and of of and of Subsistence. (2019). Harvest of Salmon across Commercial, Subsistence, Personal Use, and Sport Fish sectors, Alaska, 1995-2016. Knowledge Network for Biocomplexity. doi:10.5063/F1HM56Q3.\n\n\n\n\nConsidering the cultural significance that Chinook salmon hold in Unangan communities, it is possible that the proportion of Chinook salmon harvested will be greater in the subsistence sector than in the commercial sector. However, there is also a monetary incentive for harvesting Chinook for commercial purposes, as they are the largest Pacific species and fetch a high value on the market.\nDespite their high commercial value, I hypothesize that the proportion of Chinook salmon harvested is greater in the subsistence sector than the commercial sector.\nTo explore this hypothesis, I use a randomization test to explore the question:\nIs the proportion of Chinook salmon harvested greater in the subsistence sector than the commercial sector?\n\nNull hypothesis: The proportion of Chinook salmon harvested is not greater in the subsistence sector than the commercial sector.\nAlternative hypothesis: The proportion of Chinook salmon harvested is greater in the subsistence sector than the commercial sector.\n\n\n\n\n\n\n\n# Load libraries\nlibrary(tidyverse)\nlibrary(kableExtra)\n\n# Load data\nharvest &lt;- read_csv(\"Harvest_All_Sectors.csv\")\n\n\n\n\nThe data includes harvest counts for all Alaska regions. For this analysis, I am only interested in the Alaska Peninsula and Aleutian Islands:\n\n# Filter harvest data to the Alaska Peninsula and Aleutian Islands\napai_harvest &lt;- harvest |&gt;\n  filter(SASAP.Region == \"Alaska Peninsula and Aleutian Islands\")\n\nNext, I want to categorize sector into two groups: subsistence and commercial. On the ground, personal use and subsistence catches are nearly identical in harvest methods and use. The personal use sector was created in response to the enactment of the state’s subsistence priority law, which precluded some individuals from participating in customary and traditional subsistence fisheries because the stocks they fish are not classified as customary and traditional use stocks 4. Because of this, I will group personal use into the subsistence category.\n\n# Replace all \"Personal Use\" with \"Subsistence\"\napai_harvest$sector &lt;- str_replace_all(apai_harvest$sector, \"Personal Use\", \"Subsistence\")\n\n# Check that Personal Use is no longer in dataset\nunique(apai_harvest$sector)\n\n[1] \"Commercial\"  \"Sport Fish\"  \"Subsistence\"\n\n\nI want to compare Chinook salmon to all other species. By grouping all other salmon species into one group, I will be able to calculate total harvest for Chinook and other species by sector and year.\nFrom 1975-1984, there is only data for commercial harvest. I want to only include years that have data for both the commercial and subsistence sectors, so I will filter the data to 1985-2016. Lastly, I will finish my data cleaning by filtering down to the two sectors of interest, Subsistence and Commercial.\n\n# Subset data to harvest of Chinook salmon and other salmon species in the 2 sectors from 1985-2016\nchinook_harvest &lt;- apai_harvest |&gt;\n  mutate(species = ifelse(species == \"chinook\", \"chinook\", \"other\")) |&gt;\n  filter((sector == \"Commercial\") | (sector == \"Subsistence\")) |&gt;\n  filter(year &gt;= 1985 & year &lt;= 2016) |&gt;\n  group_by(year, sector, species) |&gt;\n  summarize(harvest = sum(harvest, na.rm = TRUE), .groups = \"drop\")\n\n\n\n\nFirst, I take a look at the distribution of species harvest between the two sectors:\n\n\nCode\n# Make boxplot of harvest distributions by species and sector\nggplot(chinook_harvest, aes(x = sector, y = harvest, fill = species)) +\n  geom_boxplot() +\n  facet_wrap(~sector, scale = \"free\") +\n  scale_fill_brewer(\"Species\", palette = \"Pastel1\") +\n  labs(y = \"Number of individuals harvested\",\n       x = \"Fishing Sector\",\n       title = \"Distribution of species harvested by sector\") +\n  theme_bw()\n\n\n\n\n\nThis plot shows the distribution of total harvest for Chinook and other salmon species between the subsistence and commercial fishing sectors from 1985-2016\n\n\n\n\nSince the difference in magnitude of Chinook harvest compared to all other species is so large, it makes comparing the distributions difficult to interpret. To normalize the differences for the sake of visualization, I log transform harvest:\n\n\nCode\n# Remake the same boxplot but log transform harvest for ease of visualization\nggplot(chinook_harvest, aes(x = sector, y = log(harvest), fill = species)) +\n  geom_boxplot() +\n  facet_wrap(~sector, scale = \"free\") +\n  scale_fill_brewer(\"Species\", palette = \"Pastel1\") +\n  labs(y = \"Log number of individuals harvested\",\n       x = \"Fishing Sector\",\n       title = \"Distribution of species harvested by sector - Log transformed\") +\n  theme_bw()\n\n\n\n\n\nThis plot shows the distribution of total harvest (log transformed) for Chinook and other salmon species between the subsistence and commercial fishing sectors from 1985-2016\n\n\n\n\nI am also interested to see the proportion of Chinook of the total harvest between sectors:\n\n\nCode\n# Make bar plot showing proportion of Chinook harvested\nggplot(chinook_harvest, aes(x = sector, y = harvest, fill = factor(species))) +\n  geom_col() +\n  facet_wrap(~sector, scale = \"free\") +\n  scale_fill_brewer(\"Species\", palette = \"Pastel1\") +\n  labs( x = \"Fishing Sector\", \n        y = \"Number of individuals harvested\",  \n        title = \"Total Chinook Harvest by Sector\") +\n  theme_minimal()\n\n\n\n\n\nThis plot shows the proportion of Chinook salmon of the total salmon harvest from 1985-2016 in the subsistence and commercial fishing sectors\n\n\n\n\nThe proportion of Chinook salmon harvested is a very small fraction of the whole. This makes sense, as Chinook abundance is relatively low compared to overall salmon abundance in the North Pacific 5. This makes the differences between sectors challenging to visually interpret. However, it seems that there is a higher proportion of Chinook harvested in the subsistence sector. It is important to notice the difference in the y-axes across all of these plots.\n\n\n\nI choose a randomization test for this analysis because it is a simple and straightforward way to compare the difference in proportions between two categories in my data. Since randomization tests make no underlying assumptions about the data, I do not need to check for normality before jumping in.\nStep 1: State the null and alternative hypotheses:\n\nNull hypothesis: The proportion of Chinook salmon harvested is not greater in the subsistence sector than the commercial sector.\nAlternative hypothesis: The proportion of Chinook salmon harvested is greater in the subsistence sector than the commercial sector.\n\nStep 2: Calculate the point statistic:\nThe relevant sample statistic for my hypothesis is a difference in proportions between Chinook total harvest / other total harvest in the commercial and subsistence sectors.\n\n# Find chinook proportion of total harvest in each sector\nchinook_prop &lt;- chinook_harvest |&gt;\n  group_by(species, sector) |&gt;\n  summarise(species_harvest = sum(harvest, na.rm = TRUE), .groups = \"drop\") |&gt;\n  group_by(sector) |&gt;\n  summarize(proportion = species_harvest[species == \"chinook\"] / sum(species_harvest))\n\n\n\nCode\n# Display percent of Chinook salmon in each harvest in a table\nchinook_prop |&gt;\n  mutate(proportion = round(proportion*100, 2)) |&gt;\n  kbl(col.names = c(\"Fishing sector\", \"Percent Chinook salmon of total harvest\"),\n      caption = \"Table showing the percent of the total harvest that is Chinook salmon from 1985-2016. Chinook salmon made up 1.41% of the total salmon harvest in the subsistence sector, while Chinook only made up 0.14% of the total harvest in the commercial sector.\") |&gt;\n  kable_styling(full_width = FALSE, \n                bootstrap_options = c(\"striped\", \"hover\"),\n                position = \"left\")\n\n\n\nTable showing the percent of the total harvest that is Chinook salmon from 1985-2016. Chinook salmon made up 1.41% of the total salmon harvest in the subsistence sector, while Chinook only made up 0.14% of the total harvest in the commercial sector.\n\n\nFishing sector\nPercent Chinook salmon of total harvest\n\n\n\n\nCommercial\n0.14\n\n\nSubsistence\n1.41\n\n\n\n\n\n\n\n\n# Calculate difference in proportions between sectors\npe &lt;- chinook_prop$proportion[2] - chinook_prop$proportion[1]\npe\n\n[1] 0.01275766\n\n\nThe difference in Chinook salmon harvested as a percentage of the overall harvest between subsistence and commercial sectors is 1.28%.\nStep 3: Quantify the uncertainty\nUse randomization to simulate the distribution of the sample statistic under the null hypothesis.\n\n# For reproducability\nset.seed(2222)\n\n# Randomization test\nnull_dist &lt;- replicate(1000, {\n  chinook_prop &lt;- chinook_harvest |&gt;\n    mutate(sector = sample(sector, n())) |&gt;  # Shuffling happening here\n    group_by(species, sector) |&gt;\n    summarise(species_harvest = sum(harvest, na.rm = TRUE), .groups = \"drop\") |&gt;\n    group_by(sector) |&gt;\n    summarize(proportion = species_harvest[species == \"chinook\"] / sum(species_harvest))\n  \n  # Calculate difference in proportions between sectors\n  pe &lt;- chinook_prop$proportion[2] - chinook_prop$proportion[1]\n  pe\n})\n\n# Visualize null distribution\nggplot(tibble(null_dist), aes(null_dist)) +\n  geom_histogram(bins = 20, color = \"#B8CCE1\", fill = NA, linewidth = 1) +\n  geom_vline(xintercept = pe, color = \"#F0B7B0\", linewidth = 1) +\n  geom_text(aes(x = 0.0105, y = 310, label = paste(\"True Point Estimate\")), \n            color = \"#F0B7B0\", size = 4) +\n  labs(x = \"Null distribution\",\n       y = \"Count\",\n       title = \"Simulated distribution of the sample statistic under the null hypothesis\") +\n  theme_bw()\n\n\n\n\nThis plot shows the simulated distribution of the difference in proportions under the null hypothesis. The pink line shows the true difference in proportions of the sample.\n\n\n\n\nUnder the null hypothesis, the sample statistic is normally distributed and centered around 0. The true point statistic from the data is out to the right.\nStep 4: Calculate probability of the point estimate under the null\n\n# Calculate the p-value\npval &lt;- sum((null_dist) &gt; (pe)) / length(null_dist)\nprint(pval)\n\n[1] 0\n\n\nThe p-value 0 is less than the threshold, 0.05. So, I am able to reject the null hypothesis and say that there is a 0% chance that the relationship is due to random chance. I find that the proportion of Chinook salmon harvested is in fact greater in the subsistence sector than the commercial sector.\n\n\n\n\nLimitations:\n\nSubsistence harvest data is an estimate based on household surveys and permit returns. It is extremely difficult to obtain reliable subsistence harvest data in these small communities.\nThe data I use for running the randomization test is highly aggregated, missing nuance that may exist on a finer scale.\n\nThis is an extremely simplified analysis of a very complex system. The results I found, though an interesting starting point for further analysis, should be interpreted for educational purposes only. This workflow was created as the final assignment for the graduate course EDS 222: Statistics for Environmental Data Science in the MEDS program at the Bren School of Environmental Science & Management. Throughout my project, it was my goal to apply concepts and techniques learned in class to a question about a real-world system, not to necessarily draw any reliable scientific conclusions from the study.\nThat said, my results have piqued my interest. What is this suggesting about the way Aleutian communities prioritize cultural significance and monetary incentive? Are we seeing the results of fisherman preferences or fishery sector escapement counts and bag limits? Would I see the same results if I had considered the proportion of Chinook harvested in these fishing sectors over time? What if I added other parts of the system, such as declining Chinook abundance, or Chinook escapement counts from subsistence fisheries? The questions are endless, and the data that SASAP provided is quite comprehensive. Further investigation using these datasets could yield some extremely interesting results, with potentially high value for Unangan people and Aleutian fishing communities.\nNote:\nI switch between talking about Unangan people and the broader Aleutian fishing communities throughout this analysis. Both Indigenous and non-Indigenous residents of the Aleutian Islands and Alaskan Peninsula participate in commercial and subsistence fishing activities, with Indigenous fishers only making up a small portion of the population. Drawing on my personal experience in these tight-knit communities, cultural practices regarding salmon carry across Indigenous and non-Indigenous members alike. Because of this, I take liberties applying “cultural significance” to all community members in the region.\n\nThank you!\n\n\n\n\n\n\n\n\n\n\n\nImage credits: Eric Jablonowski"
  },
  {
    "objectID": "blog-posts/chinook-harvest/index.html#background",
    "href": "blog-posts/chinook-harvest/index.html#background",
    "title": "Chinook Salmon Harvest",
    "section": "",
    "text": "Scenery in the Aleutians. Photo credits: Aleutian Island Waterfowlers\n\nSalmon are crucial to the health and cultural wellbeing of Aleut/Unangan communities along the eastern Aleutians and Alaskan Peninsula. Of the 5 Pacific salmon species, Chinook salmon hold particular cultural significance. They are also the largest, and fetch one of the highest values per pound on the commercial market 2.\nFor Aleutian communities, there is very little separation between commercial and subsistence fishing activities. Often, subsistence fish are retained to fill freezers as “homepack” from commercial harvests 3. This makes understanding participation in these fishing sectors very complex.\nThe State of Alaska Salmon and People Project (SASAP) is a collaboration of Indigenous and non-Indigenous researchers, scholars and community leaders working to produce and share integrated, accurate, and up-to-date information on Alaska’s salmon and people systems. They compiled 125 data sets into an open-source data portal that makes relevant salmon information accessible and usable by Alaskans wishing to advocate on their own behalf for a better salmon future. In recognition of the complex relationship between commercial and subsistence harvests, they uniquely derive estimated subsistence harvest from a combination of subsistence permit returns and post-season household survey data.\nUsing their dataset, Harvest of Salmon across Commercial, Subsistence, Personal Use, and Sport Fish sectors, Alaska, 1995-2016, I aim to explore how Chinook salmon harvest varies between commercial and subsistence fishing sectors."
  },
  {
    "objectID": "blog-posts/chinook-harvest/index.html#data-details",
    "href": "blog-posts/chinook-harvest/index.html#data-details",
    "title": "Chinook Salmon Harvest",
    "section": "",
    "text": "I am using a dataset from the SASAP data portal that counts harvest of the 5 Pacific salmon species across fishing sectors in Alaska from 1995-2016. The time range for the data starts in 1975, but it isn’t until 1995 that we see all 4 sectors represented in the data.\n\nAccess: https://knb.ecoinformatics.org/view/doi%3A10.5063%2FF1HM56Q3\nFile: Harvest_All_Sectors.csv\nCitation: Jeanette Clark, & Alaska Department Fish Game, Division Commercial Fisheries Alaska Department Fish Game, Division Sport Fish Alaska Department Fish Game, Division of and of of and of of and of Subsistence. (2019). Harvest of Salmon across Commercial, Subsistence, Personal Use, and Sport Fish sectors, Alaska, 1995-2016. Knowledge Network for Biocomplexity. doi:10.5063/F1HM56Q3."
  },
  {
    "objectID": "blog-posts/chinook-harvest/index.html#hypothesis",
    "href": "blog-posts/chinook-harvest/index.html#hypothesis",
    "title": "Chinook Salmon Harvest",
    "section": "",
    "text": "Considering the cultural significance that Chinook salmon hold in Unangan communities, it is possible that the proportion of Chinook salmon harvested will be greater in the subsistence sector than in the commercial sector. However, there is also a monetary incentive for harvesting Chinook for commercial purposes, as they are the largest Pacific species and fetch a high value on the market.\nDespite their high commercial value, I hypothesize that the proportion of Chinook salmon harvested is greater in the subsistence sector than the commercial sector.\nTo explore this hypothesis, I use a randomization test to explore the question:\nIs the proportion of Chinook salmon harvested greater in the subsistence sector than the commercial sector?\n\nNull hypothesis: The proportion of Chinook salmon harvested is not greater in the subsistence sector than the commercial sector.\nAlternative hypothesis: The proportion of Chinook salmon harvested is greater in the subsistence sector than the commercial sector."
  },
  {
    "objectID": "blog-posts/chinook-harvest/index.html#analysis",
    "href": "blog-posts/chinook-harvest/index.html#analysis",
    "title": "Chinook Salmon Harvest",
    "section": "",
    "text": "# Load libraries\nlibrary(tidyverse)\nlibrary(kableExtra)\n\n# Load data\nharvest &lt;- read_csv(\"Harvest_All_Sectors.csv\")\n\n\n\n\nThe data includes harvest counts for all Alaska regions. For this analysis, I am only interested in the Alaska Peninsula and Aleutian Islands:\n\n# Filter harvest data to the Alaska Peninsula and Aleutian Islands\napai_harvest &lt;- harvest |&gt;\n  filter(SASAP.Region == \"Alaska Peninsula and Aleutian Islands\")\n\nNext, I want to categorize sector into two groups: subsistence and commercial. On the ground, personal use and subsistence catches are nearly identical in harvest methods and use. The personal use sector was created in response to the enactment of the state’s subsistence priority law, which precluded some individuals from participating in customary and traditional subsistence fisheries because the stocks they fish are not classified as customary and traditional use stocks 4. Because of this, I will group personal use into the subsistence category.\n\n# Replace all \"Personal Use\" with \"Subsistence\"\napai_harvest$sector &lt;- str_replace_all(apai_harvest$sector, \"Personal Use\", \"Subsistence\")\n\n# Check that Personal Use is no longer in dataset\nunique(apai_harvest$sector)\n\n[1] \"Commercial\"  \"Sport Fish\"  \"Subsistence\"\n\n\nI want to compare Chinook salmon to all other species. By grouping all other salmon species into one group, I will be able to calculate total harvest for Chinook and other species by sector and year.\nFrom 1975-1984, there is only data for commercial harvest. I want to only include years that have data for both the commercial and subsistence sectors, so I will filter the data to 1985-2016. Lastly, I will finish my data cleaning by filtering down to the two sectors of interest, Subsistence and Commercial.\n\n# Subset data to harvest of Chinook salmon and other salmon species in the 2 sectors from 1985-2016\nchinook_harvest &lt;- apai_harvest |&gt;\n  mutate(species = ifelse(species == \"chinook\", \"chinook\", \"other\")) |&gt;\n  filter((sector == \"Commercial\") | (sector == \"Subsistence\")) |&gt;\n  filter(year &gt;= 1985 & year &lt;= 2016) |&gt;\n  group_by(year, sector, species) |&gt;\n  summarize(harvest = sum(harvest, na.rm = TRUE), .groups = \"drop\")\n\n\n\n\nFirst, I take a look at the distribution of species harvest between the two sectors:\n\n\nCode\n# Make boxplot of harvest distributions by species and sector\nggplot(chinook_harvest, aes(x = sector, y = harvest, fill = species)) +\n  geom_boxplot() +\n  facet_wrap(~sector, scale = \"free\") +\n  scale_fill_brewer(\"Species\", palette = \"Pastel1\") +\n  labs(y = \"Number of individuals harvested\",\n       x = \"Fishing Sector\",\n       title = \"Distribution of species harvested by sector\") +\n  theme_bw()\n\n\n\n\n\nThis plot shows the distribution of total harvest for Chinook and other salmon species between the subsistence and commercial fishing sectors from 1985-2016\n\n\n\n\nSince the difference in magnitude of Chinook harvest compared to all other species is so large, it makes comparing the distributions difficult to interpret. To normalize the differences for the sake of visualization, I log transform harvest:\n\n\nCode\n# Remake the same boxplot but log transform harvest for ease of visualization\nggplot(chinook_harvest, aes(x = sector, y = log(harvest), fill = species)) +\n  geom_boxplot() +\n  facet_wrap(~sector, scale = \"free\") +\n  scale_fill_brewer(\"Species\", palette = \"Pastel1\") +\n  labs(y = \"Log number of individuals harvested\",\n       x = \"Fishing Sector\",\n       title = \"Distribution of species harvested by sector - Log transformed\") +\n  theme_bw()\n\n\n\n\n\nThis plot shows the distribution of total harvest (log transformed) for Chinook and other salmon species between the subsistence and commercial fishing sectors from 1985-2016\n\n\n\n\nI am also interested to see the proportion of Chinook of the total harvest between sectors:\n\n\nCode\n# Make bar plot showing proportion of Chinook harvested\nggplot(chinook_harvest, aes(x = sector, y = harvest, fill = factor(species))) +\n  geom_col() +\n  facet_wrap(~sector, scale = \"free\") +\n  scale_fill_brewer(\"Species\", palette = \"Pastel1\") +\n  labs( x = \"Fishing Sector\", \n        y = \"Number of individuals harvested\",  \n        title = \"Total Chinook Harvest by Sector\") +\n  theme_minimal()\n\n\n\n\n\nThis plot shows the proportion of Chinook salmon of the total salmon harvest from 1985-2016 in the subsistence and commercial fishing sectors\n\n\n\n\nThe proportion of Chinook salmon harvested is a very small fraction of the whole. This makes sense, as Chinook abundance is relatively low compared to overall salmon abundance in the North Pacific 5. This makes the differences between sectors challenging to visually interpret. However, it seems that there is a higher proportion of Chinook harvested in the subsistence sector. It is important to notice the difference in the y-axes across all of these plots.\n\n\n\nI choose a randomization test for this analysis because it is a simple and straightforward way to compare the difference in proportions between two categories in my data. Since randomization tests make no underlying assumptions about the data, I do not need to check for normality before jumping in.\nStep 1: State the null and alternative hypotheses:\n\nNull hypothesis: The proportion of Chinook salmon harvested is not greater in the subsistence sector than the commercial sector.\nAlternative hypothesis: The proportion of Chinook salmon harvested is greater in the subsistence sector than the commercial sector.\n\nStep 2: Calculate the point statistic:\nThe relevant sample statistic for my hypothesis is a difference in proportions between Chinook total harvest / other total harvest in the commercial and subsistence sectors.\n\n# Find chinook proportion of total harvest in each sector\nchinook_prop &lt;- chinook_harvest |&gt;\n  group_by(species, sector) |&gt;\n  summarise(species_harvest = sum(harvest, na.rm = TRUE), .groups = \"drop\") |&gt;\n  group_by(sector) |&gt;\n  summarize(proportion = species_harvest[species == \"chinook\"] / sum(species_harvest))\n\n\n\nCode\n# Display percent of Chinook salmon in each harvest in a table\nchinook_prop |&gt;\n  mutate(proportion = round(proportion*100, 2)) |&gt;\n  kbl(col.names = c(\"Fishing sector\", \"Percent Chinook salmon of total harvest\"),\n      caption = \"Table showing the percent of the total harvest that is Chinook salmon from 1985-2016. Chinook salmon made up 1.41% of the total salmon harvest in the subsistence sector, while Chinook only made up 0.14% of the total harvest in the commercial sector.\") |&gt;\n  kable_styling(full_width = FALSE, \n                bootstrap_options = c(\"striped\", \"hover\"),\n                position = \"left\")\n\n\n\nTable showing the percent of the total harvest that is Chinook salmon from 1985-2016. Chinook salmon made up 1.41% of the total salmon harvest in the subsistence sector, while Chinook only made up 0.14% of the total harvest in the commercial sector.\n\n\nFishing sector\nPercent Chinook salmon of total harvest\n\n\n\n\nCommercial\n0.14\n\n\nSubsistence\n1.41\n\n\n\n\n\n\n\n\n# Calculate difference in proportions between sectors\npe &lt;- chinook_prop$proportion[2] - chinook_prop$proportion[1]\npe\n\n[1] 0.01275766\n\n\nThe difference in Chinook salmon harvested as a percentage of the overall harvest between subsistence and commercial sectors is 1.28%.\nStep 3: Quantify the uncertainty\nUse randomization to simulate the distribution of the sample statistic under the null hypothesis.\n\n# For reproducability\nset.seed(2222)\n\n# Randomization test\nnull_dist &lt;- replicate(1000, {\n  chinook_prop &lt;- chinook_harvest |&gt;\n    mutate(sector = sample(sector, n())) |&gt;  # Shuffling happening here\n    group_by(species, sector) |&gt;\n    summarise(species_harvest = sum(harvest, na.rm = TRUE), .groups = \"drop\") |&gt;\n    group_by(sector) |&gt;\n    summarize(proportion = species_harvest[species == \"chinook\"] / sum(species_harvest))\n  \n  # Calculate difference in proportions between sectors\n  pe &lt;- chinook_prop$proportion[2] - chinook_prop$proportion[1]\n  pe\n})\n\n# Visualize null distribution\nggplot(tibble(null_dist), aes(null_dist)) +\n  geom_histogram(bins = 20, color = \"#B8CCE1\", fill = NA, linewidth = 1) +\n  geom_vline(xintercept = pe, color = \"#F0B7B0\", linewidth = 1) +\n  geom_text(aes(x = 0.0105, y = 310, label = paste(\"True Point Estimate\")), \n            color = \"#F0B7B0\", size = 4) +\n  labs(x = \"Null distribution\",\n       y = \"Count\",\n       title = \"Simulated distribution of the sample statistic under the null hypothesis\") +\n  theme_bw()\n\n\n\n\nThis plot shows the simulated distribution of the difference in proportions under the null hypothesis. The pink line shows the true difference in proportions of the sample.\n\n\n\n\nUnder the null hypothesis, the sample statistic is normally distributed and centered around 0. The true point statistic from the data is out to the right.\nStep 4: Calculate probability of the point estimate under the null\n\n# Calculate the p-value\npval &lt;- sum((null_dist) &gt; (pe)) / length(null_dist)\nprint(pval)\n\n[1] 0\n\n\nThe p-value 0 is less than the threshold, 0.05. So, I am able to reject the null hypothesis and say that there is a 0% chance that the relationship is due to random chance. I find that the proportion of Chinook salmon harvested is in fact greater in the subsistence sector than the commercial sector."
  },
  {
    "objectID": "blog-posts/chinook-harvest/index.html#interpretation-and-further-investigation",
    "href": "blog-posts/chinook-harvest/index.html#interpretation-and-further-investigation",
    "title": "Chinook Salmon Harvest",
    "section": "",
    "text": "Limitations:\n\nSubsistence harvest data is an estimate based on household surveys and permit returns. It is extremely difficult to obtain reliable subsistence harvest data in these small communities.\nThe data I use for running the randomization test is highly aggregated, missing nuance that may exist on a finer scale.\n\nThis is an extremely simplified analysis of a very complex system. The results I found, though an interesting starting point for further analysis, should be interpreted for educational purposes only. This workflow was created as the final assignment for the graduate course EDS 222: Statistics for Environmental Data Science in the MEDS program at the Bren School of Environmental Science & Management. Throughout my project, it was my goal to apply concepts and techniques learned in class to a question about a real-world system, not to necessarily draw any reliable scientific conclusions from the study.\nThat said, my results have piqued my interest. What is this suggesting about the way Aleutian communities prioritize cultural significance and monetary incentive? Are we seeing the results of fisherman preferences or fishery sector escapement counts and bag limits? Would I see the same results if I had considered the proportion of Chinook harvested in these fishing sectors over time? What if I added other parts of the system, such as declining Chinook abundance, or Chinook escapement counts from subsistence fisheries? The questions are endless, and the data that SASAP provided is quite comprehensive. Further investigation using these datasets could yield some extremely interesting results, with potentially high value for Unangan people and Aleutian fishing communities.\nNote:\nI switch between talking about Unangan people and the broader Aleutian fishing communities throughout this analysis. Both Indigenous and non-Indigenous residents of the Aleutian Islands and Alaskan Peninsula participate in commercial and subsistence fishing activities, with Indigenous fishers only making up a small portion of the population. Drawing on my personal experience in these tight-knit communities, cultural practices regarding salmon carry across Indigenous and non-Indigenous members alike. Because of this, I take liberties applying “cultural significance” to all community members in the region.\n\nThank you!\n\n\n\n\n\n\n\n\n\n\n\nImage credits: Eric Jablonowski"
  },
  {
    "objectID": "blog-posts/chinook-harvest/index.html#footnotes",
    "href": "blog-posts/chinook-harvest/index.html#footnotes",
    "title": "Chinook Salmon Harvest",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nIn this section, when possible, I will be using the traditional Aleut language, Unangam Tunuu. All words are translated in the Aleutian Pribilof Islands Associaton’s Traditional Foods Glossary↩︎\nAlaska Department of Fish and Game. (2023). 2023 preliminary Alaska Commercial Harvest and Exvessel Values. https://www.adfg.alaska.gov/static/fishing/pdfs/commercial/2023_preliminary_salmon_summary_table.pdf↩︎\nSASAP. (n.d.). Alaska Peninsula/Aleutian Islands Alaska Peninsula/Aleutian Islands : SASAP : State of Alaska Salmon and People. https://alaskasalmonandpeople.org/region/alaska-peninsula-aleutian-islands/↩︎\nJeanette Clark, & Alaska Department Fish Game, Division Commercial Fisheries Alaska Department Fish Game, Division Sport Fish Alaska Department Fish Game, Division of and of of and of of and of Subsistence. (2019). Harvest of Salmon across Commercial, Subsistence, Personal Use, and Sport Fish sectors, Alaska, 1995-2016. Knowledge Network for Biocomplexity. doi:10.5063/F1HM56Q3.↩︎\nBrendan Connors, Gregory T Ruggerone, James R Irvine, Adapting management of Pacific salmon to a warming and more crowded ocean, ICES Journal of Marine Science, 2024;, fsae135, https://doi.org/10.1093/icesjms/fsae135↩︎"
  },
  {
    "objectID": "blog-posts/sb-landcover/landcover_classification.html",
    "href": "blog-posts/sb-landcover/landcover_classification.html",
    "title": "Landcover Classification",
    "section": "",
    "text": "Monitoring the distribution and change in land cover types can help us understand the impacts of phenomena like climate change, natural disasters, deforestation, and urbanization. Determining land cover types over large areas is a major application of remote sensing because we are able to distinguish different materials based on their spectral reflectance.\nClassifying remotely sensed imagery into land cover classes enables us to understand the distribution and change in land cover types over large areas.\nThere are many approaches for performing land cover classification:\n\nSupervised approaches use training data labeled by the user\nUnsupervised approaches use algorithms to create groups which are identified by the user afterward\n\n\n\n\nIn this analysis, I am using a form of supervised classification – a decision tree classifier.\nDecision trees classify pixels using a series of conditions based on values in spectral bands. These conditions (or decisions) are developed based on training data.\nI use the decision tree to create a land cover classification for southern Santa Barbara County based on multi-spectral imagery and data on the location of 4 land cover types:\n\ngreen vegetation\ndry grass or soil\nurban\nwater\n\nTo do so, I will:\n\nLoad and process Landsat scene\nCrop and mask Landsat data to study area\nExtract spectral data at training sites\nTrain and apply decision tree classifier\nPlot results\n\n\n\n\n\n\n\nLandsat 5\n1 scene from September 25, 2007\nBands: 1, 2, 3, 4, 5, 7\nCollection 2 surface reflectance product\n\nData files:\n\nlandsat-data/LT05_L2SP_042036_20070925_20200829_02_T1_SR_B1.tif\nlandsat-data/LT05_L2SP_042036_20070925_20200829_02_T1_SR_B2.tif\nlandsat-data/LT05_L2SP_042036_20070925_20200829_02_T1_SR_B3.tif\nlandsat-data/LT05_L2SP_042036_20070925_20200829_02_T1_SR_B4.tif\nlandsat-data/LT05_L2SP_042036_20070925_20200829_02_T1_SR_B5.tif\nlandsat-data/LT05_L2SP_042036_20070925_20200829_02_T1_SR_B7.tif\n\n\n\n\nPolygon representing southern Santa Barbara county\nData file: SB_county_south.shp\n\n\n\nPolygons representing sites with training data - type: character string with land cover type\nData file: trainingdata.shp\n\n\n\n\n\n\n\n# Load libraries\nlibrary(sf) # vector data\nlibrary(terra) # raster data\nlibrary(here) # file path management\nlibrary(tidyverse)\nlibrary(rpart) # recursive partitioning and regression trees\nlibrary(rpart.plot) # plotting for rpart\nlibrary(tmap) # map making\n\n\n\n\nLet’s create a raster stack. Each file name ends with the band number (e.g. B1.tif).\n\nI am missing a file for band 6: band 6 corresponds to thermal data, which I will not be working with here\n\nTo create a raster stack, I create a list of the files read them all in at once using the terra::rast() function. I’ll then update the names of the layers to match the spectral bands and plot a true color image to see what I’m working with.\n\n# List files for each band, including the full file path\nfilelist &lt;- list.files(here::here(\"blog-posts\", \"sb-landcover\", \"data\", \"landsat-data\"), full.names = TRUE)\n\n# Read in and store as a raster stack\nlandsat &lt;- rast(filelist)\n\n# Update layer names to match band\nnames(landsat) &lt;- c(\"blue\", \"green\", \"red\", \"NIR\", \"SWIR1\", \"SWIR2\")\n\n# Plot true color image\nplotRGB(landsat, r = 3, g = 2, b = 1, stretch = \"lin\")\n\n\n\n\n\n\n\n\n\n\n\nI want to constrain my analysis to the southern portion of the county where we have training data, so I read in a file that defines the area we would like to study.\n\n# Read in shapefile for southern portion of SB county\nSB_county_south &lt;- st_read(here::here(\"blog-posts\", \"sb-landcover\", \"data\", \"SB_county_south.shp\")) |&gt;\n  st_transform(SB_county_south, crs = crs(landsat))\n\n\ntm_shape(SB_county_south) +\n  tm_borders()\n\n\n\n\n\n\n\n\n\n\n\nNow, I can crop and mask the Landsat data to our study area.\n\n# Crop the Landsat scene to the extent of the study area\nlandsat_cropped &lt;- terra::crop(landsat, SB_county_south)\n\n# Mask the raster to southern portion of SB county\nlandsat_masked &lt;- terra::mask(landsat_cropped, SB_county_south)\n\n# Remove unnecessary objects from environment\nrm(landsat, SB_county_south, landsat_cropped)\n\n# Plot masked true color image\nplotRGB(landsat_masked, r = 3, g = 2, b = 1, stretch = \"lin\")\n\n\n\n\n\n\n\n\n\n\n\nNow I need to convert the values in the raster stack to correspond to reflectance values. To do so, I remove erroneous values and apply any scaling factors to convert to reflectance.\nIn this case:\n\nThe valid range of pixel values for this collection goes from 7,273 to 43,636…\n\nwith a multiplicative scale factor of 0.0000275\nwith an additive scale factor of -0.2\n\n\nLet’s reclassify any erroneous values as NA and update the values for each pixel based on the scaling factors. Now the pixel values should range from 0-100%!\n\n# Reclassify erroneous values as NA\nrcl &lt;- matrix(c(-Inf, 7273, NA,\n                43636, Inf, NA),\n              byrow = TRUE,\n              ncol = 3)\n\nlandsat &lt;- terra::classify(landsat_masked, rcl = rcl)\n\n# Adjust values based on scaling and additive factor\nlandsat &lt;- (landsat * 0.0000275 - 0.2) * 100\n\n# Check values are 0 - 100\nsummary(landsat)\n\n      blue           green            red             NIR       \n Min.   : 1.11   Min.   : 0.74   Min.   : 0.00   Min.   : 0.23  \n 1st Qu.: 2.49   1st Qu.: 2.17   1st Qu.: 1.08   1st Qu.: 0.75  \n Median : 3.06   Median : 4.59   Median : 4.45   Median :14.39  \n Mean   : 3.83   Mean   : 5.02   Mean   : 4.92   Mean   :11.52  \n 3rd Qu.: 4.63   3rd Qu.: 6.76   3rd Qu.: 7.40   3rd Qu.:19.34  \n Max.   :39.42   Max.   :53.32   Max.   :56.68   Max.   :57.08  \n NA's   :39856   NA's   :39855   NA's   :39855   NA's   :39856  \n     SWIR1           SWIR2      \n Min.   : 0.10   Min.   : 0.20  \n 1st Qu.: 0.41   1st Qu.: 0.60  \n Median :13.43   Median : 8.15  \n Mean   :11.88   Mean   : 8.52  \n 3rd Qu.:18.70   3rd Qu.:13.07  \n Max.   :49.13   Max.   :48.07  \n NA's   :42892   NA's   :46809  \n\n\n\n\n\nLet’s begin by extracting reflectance values for training data!\nI load the shapefile identifying locations within the study area as containing one of the 4 land cover types.\n\n# Read in and transform training data\ntraining_data &lt;- st_read(here::here(\"blog-posts\", \"sb-landcover\", \"data\", \"trainingdata.shp\")) |&gt;\n  st_transform(training_data, crs = crs(landsat))\n\nNow, I extract the spectral reflectance values at each site to create a data frame that relates land cover types to their spectral reflectance.\n\n# Extract reflectance values at training sites (extracts values from each grid cell)\ntraining_data_values &lt;- terra::extract(landsat, training_data, df = TRUE)\n\n# Convert training data to data frame\ntraining_data_attributes &lt;- training_data |&gt;\n  st_drop_geometry()\n\n# Join training data attributes and extracted reflectance values\nSB_training_data &lt;- left_join(training_data_values, training_data_attributes,\n                              by = c(\"ID\" = \"id\")) |&gt;\n                      mutate(type = as.factor(type))\n\nNext, I train the decision tree classifier!\nTo train the decision tree, I first establish our model formula.\n\nThe rpart() function implements the CART algorithm\nThe rpart() function needs to know the model formula and training data you would like to use\nBecause I am performing a classification, I set method = \"class\"\nI also set na.action = na.omit to remove any pixels with NAs from the analysis.\n\n\n# Establish model formula\nSB_formula &lt;- type ~ red + green + blue + NIR + SWIR1 + SWIR2\n\n# Train decision tree\nSB_decision_tree &lt;- rpart(formula = SB_formula,\n                          data = SB_training_data,\n                          method = \"class\",\n                          na.action = na.omit)\n\nTo understand how the decision tree will classify pixels, I plot the results.\n\n# Plot decision tree\nprp(SB_decision_tree)\n\n\n\n\n\n\n\n\n\n\n\nNow that I have a rule set for classifying spectral reflectance values into landcover types, I can apply the classifier to identify the landcover type in each pixel.\nThe terra package includes a predict() function that allows us to apply a model to the data. In order for this to work properly, the names of the layers need to match the column names of the predictors I used to train the decision tree. The predict() function will return a raster layer with integer values. These integer values correspond to the factor levels in the training data. To figure out what category each integer corresponds to, I inspect the levels of our training data.\n\n# Classify image based on decision tree\nSB_classification &lt;- terra::predict(landsat, SB_decision_tree,\n                                    type = \"class\", na.rm = TRUE)\n\n# Inspect level to understand the order of classes in prediction\nlevels(SB_training_data$type)\n\n[1] \"green_vegetation\" \"soil_dead_grass\"  \"urban\"            \"water\"           \n\nlevels(SB_classification)\n\n[[1]]\n  value            class\n1     1 green_vegetation\n2     2  soil_dead_grass\n3     3            urban\n4     4            water\n\n\n\n\n\nNow, I plot the land cover map!\n\ntm_shape(SB_classification) +\n  tm_raster(palette = c(\"#8DB580\", \"#F2DDA4\", \"#7E8987\", \"#6A8EAE\"),\n            labels = c(\"green vegetation\", \"soil/dead grass\", \"urban\", \"water\"),\n            title = \"Landcover type\") +\n  tm_layout(legend.position = c(\"left\", \"bottom\"),\n            main.title = \"Santa Barbara Landcover\")\n\n\n\n\n\n\n\n\n\n\n\n\nThis post was heavily reused from an assignment for the graduate course EDS 223: Geospatial Analysis and Remote Sensing in the Masters of Environmental Data Science (MEDS) program, created by Dr. Ruth Oliver."
  },
  {
    "objectID": "blog-posts/sb-landcover/landcover_classification.html#background",
    "href": "blog-posts/sb-landcover/landcover_classification.html#background",
    "title": "Landcover Classification",
    "section": "",
    "text": "Monitoring the distribution and change in land cover types can help us understand the impacts of phenomena like climate change, natural disasters, deforestation, and urbanization. Determining land cover types over large areas is a major application of remote sensing because we are able to distinguish different materials based on their spectral reflectance.\nClassifying remotely sensed imagery into land cover classes enables us to understand the distribution and change in land cover types over large areas.\nThere are many approaches for performing land cover classification:\n\nSupervised approaches use training data labeled by the user\nUnsupervised approaches use algorithms to create groups which are identified by the user afterward"
  },
  {
    "objectID": "blog-posts/sb-landcover/landcover_classification.html#task",
    "href": "blog-posts/sb-landcover/landcover_classification.html#task",
    "title": "Landcover Classification",
    "section": "",
    "text": "In this analysis, I am using a form of supervised classification – a decision tree classifier.\nDecision trees classify pixels using a series of conditions based on values in spectral bands. These conditions (or decisions) are developed based on training data.\nI use the decision tree to create a land cover classification for southern Santa Barbara County based on multi-spectral imagery and data on the location of 4 land cover types:\n\ngreen vegetation\ndry grass or soil\nurban\nwater\n\nTo do so, I will:\n\nLoad and process Landsat scene\nCrop and mask Landsat data to study area\nExtract spectral data at training sites\nTrain and apply decision tree classifier\nPlot results"
  },
  {
    "objectID": "blog-posts/sb-landcover/landcover_classification.html#data",
    "href": "blog-posts/sb-landcover/landcover_classification.html#data",
    "title": "Landcover Classification",
    "section": "",
    "text": "Landsat 5\n1 scene from September 25, 2007\nBands: 1, 2, 3, 4, 5, 7\nCollection 2 surface reflectance product\n\nData files:\n\nlandsat-data/LT05_L2SP_042036_20070925_20200829_02_T1_SR_B1.tif\nlandsat-data/LT05_L2SP_042036_20070925_20200829_02_T1_SR_B2.tif\nlandsat-data/LT05_L2SP_042036_20070925_20200829_02_T1_SR_B3.tif\nlandsat-data/LT05_L2SP_042036_20070925_20200829_02_T1_SR_B4.tif\nlandsat-data/LT05_L2SP_042036_20070925_20200829_02_T1_SR_B5.tif\nlandsat-data/LT05_L2SP_042036_20070925_20200829_02_T1_SR_B7.tif\n\n\n\n\nPolygon representing southern Santa Barbara county\nData file: SB_county_south.shp\n\n\n\nPolygons representing sites with training data - type: character string with land cover type\nData file: trainingdata.shp"
  },
  {
    "objectID": "blog-posts/sb-landcover/landcover_classification.html#workflow",
    "href": "blog-posts/sb-landcover/landcover_classification.html#workflow",
    "title": "Landcover Classification",
    "section": "",
    "text": "# Load libraries\nlibrary(sf) # vector data\nlibrary(terra) # raster data\nlibrary(here) # file path management\nlibrary(tidyverse)\nlibrary(rpart) # recursive partitioning and regression trees\nlibrary(rpart.plot) # plotting for rpart\nlibrary(tmap) # map making\n\n\n\n\nLet’s create a raster stack. Each file name ends with the band number (e.g. B1.tif).\n\nI am missing a file for band 6: band 6 corresponds to thermal data, which I will not be working with here\n\nTo create a raster stack, I create a list of the files read them all in at once using the terra::rast() function. I’ll then update the names of the layers to match the spectral bands and plot a true color image to see what I’m working with.\n\n# List files for each band, including the full file path\nfilelist &lt;- list.files(here::here(\"blog-posts\", \"sb-landcover\", \"data\", \"landsat-data\"), full.names = TRUE)\n\n# Read in and store as a raster stack\nlandsat &lt;- rast(filelist)\n\n# Update layer names to match band\nnames(landsat) &lt;- c(\"blue\", \"green\", \"red\", \"NIR\", \"SWIR1\", \"SWIR2\")\n\n# Plot true color image\nplotRGB(landsat, r = 3, g = 2, b = 1, stretch = \"lin\")\n\n\n\n\n\n\n\n\n\n\n\nI want to constrain my analysis to the southern portion of the county where we have training data, so I read in a file that defines the area we would like to study.\n\n# Read in shapefile for southern portion of SB county\nSB_county_south &lt;- st_read(here::here(\"blog-posts\", \"sb-landcover\", \"data\", \"SB_county_south.shp\")) |&gt;\n  st_transform(SB_county_south, crs = crs(landsat))\n\n\ntm_shape(SB_county_south) +\n  tm_borders()\n\n\n\n\n\n\n\n\n\n\n\nNow, I can crop and mask the Landsat data to our study area.\n\n# Crop the Landsat scene to the extent of the study area\nlandsat_cropped &lt;- terra::crop(landsat, SB_county_south)\n\n# Mask the raster to southern portion of SB county\nlandsat_masked &lt;- terra::mask(landsat_cropped, SB_county_south)\n\n# Remove unnecessary objects from environment\nrm(landsat, SB_county_south, landsat_cropped)\n\n# Plot masked true color image\nplotRGB(landsat_masked, r = 3, g = 2, b = 1, stretch = \"lin\")\n\n\n\n\n\n\n\n\n\n\n\nNow I need to convert the values in the raster stack to correspond to reflectance values. To do so, I remove erroneous values and apply any scaling factors to convert to reflectance.\nIn this case:\n\nThe valid range of pixel values for this collection goes from 7,273 to 43,636…\n\nwith a multiplicative scale factor of 0.0000275\nwith an additive scale factor of -0.2\n\n\nLet’s reclassify any erroneous values as NA and update the values for each pixel based on the scaling factors. Now the pixel values should range from 0-100%!\n\n# Reclassify erroneous values as NA\nrcl &lt;- matrix(c(-Inf, 7273, NA,\n                43636, Inf, NA),\n              byrow = TRUE,\n              ncol = 3)\n\nlandsat &lt;- terra::classify(landsat_masked, rcl = rcl)\n\n# Adjust values based on scaling and additive factor\nlandsat &lt;- (landsat * 0.0000275 - 0.2) * 100\n\n# Check values are 0 - 100\nsummary(landsat)\n\n      blue           green            red             NIR       \n Min.   : 1.11   Min.   : 0.74   Min.   : 0.00   Min.   : 0.23  \n 1st Qu.: 2.49   1st Qu.: 2.17   1st Qu.: 1.08   1st Qu.: 0.75  \n Median : 3.06   Median : 4.59   Median : 4.45   Median :14.39  \n Mean   : 3.83   Mean   : 5.02   Mean   : 4.92   Mean   :11.52  \n 3rd Qu.: 4.63   3rd Qu.: 6.76   3rd Qu.: 7.40   3rd Qu.:19.34  \n Max.   :39.42   Max.   :53.32   Max.   :56.68   Max.   :57.08  \n NA's   :39856   NA's   :39855   NA's   :39855   NA's   :39856  \n     SWIR1           SWIR2      \n Min.   : 0.10   Min.   : 0.20  \n 1st Qu.: 0.41   1st Qu.: 0.60  \n Median :13.43   Median : 8.15  \n Mean   :11.88   Mean   : 8.52  \n 3rd Qu.:18.70   3rd Qu.:13.07  \n Max.   :49.13   Max.   :48.07  \n NA's   :42892   NA's   :46809  \n\n\n\n\n\nLet’s begin by extracting reflectance values for training data!\nI load the shapefile identifying locations within the study area as containing one of the 4 land cover types.\n\n# Read in and transform training data\ntraining_data &lt;- st_read(here::here(\"blog-posts\", \"sb-landcover\", \"data\", \"trainingdata.shp\")) |&gt;\n  st_transform(training_data, crs = crs(landsat))\n\nNow, I extract the spectral reflectance values at each site to create a data frame that relates land cover types to their spectral reflectance.\n\n# Extract reflectance values at training sites (extracts values from each grid cell)\ntraining_data_values &lt;- terra::extract(landsat, training_data, df = TRUE)\n\n# Convert training data to data frame\ntraining_data_attributes &lt;- training_data |&gt;\n  st_drop_geometry()\n\n# Join training data attributes and extracted reflectance values\nSB_training_data &lt;- left_join(training_data_values, training_data_attributes,\n                              by = c(\"ID\" = \"id\")) |&gt;\n                      mutate(type = as.factor(type))\n\nNext, I train the decision tree classifier!\nTo train the decision tree, I first establish our model formula.\n\nThe rpart() function implements the CART algorithm\nThe rpart() function needs to know the model formula and training data you would like to use\nBecause I am performing a classification, I set method = \"class\"\nI also set na.action = na.omit to remove any pixels with NAs from the analysis.\n\n\n# Establish model formula\nSB_formula &lt;- type ~ red + green + blue + NIR + SWIR1 + SWIR2\n\n# Train decision tree\nSB_decision_tree &lt;- rpart(formula = SB_formula,\n                          data = SB_training_data,\n                          method = \"class\",\n                          na.action = na.omit)\n\nTo understand how the decision tree will classify pixels, I plot the results.\n\n# Plot decision tree\nprp(SB_decision_tree)\n\n\n\n\n\n\n\n\n\n\n\nNow that I have a rule set for classifying spectral reflectance values into landcover types, I can apply the classifier to identify the landcover type in each pixel.\nThe terra package includes a predict() function that allows us to apply a model to the data. In order for this to work properly, the names of the layers need to match the column names of the predictors I used to train the decision tree. The predict() function will return a raster layer with integer values. These integer values correspond to the factor levels in the training data. To figure out what category each integer corresponds to, I inspect the levels of our training data.\n\n# Classify image based on decision tree\nSB_classification &lt;- terra::predict(landsat, SB_decision_tree,\n                                    type = \"class\", na.rm = TRUE)\n\n# Inspect level to understand the order of classes in prediction\nlevels(SB_training_data$type)\n\n[1] \"green_vegetation\" \"soil_dead_grass\"  \"urban\"            \"water\"           \n\nlevels(SB_classification)\n\n[[1]]\n  value            class\n1     1 green_vegetation\n2     2  soil_dead_grass\n3     3            urban\n4     4            water\n\n\n\n\n\nNow, I plot the land cover map!\n\ntm_shape(SB_classification) +\n  tm_raster(palette = c(\"#8DB580\", \"#F2DDA4\", \"#7E8987\", \"#6A8EAE\"),\n            labels = c(\"green vegetation\", \"soil/dead grass\", \"urban\", \"water\"),\n            title = \"Landcover type\") +\n  tm_layout(legend.position = c(\"left\", \"bottom\"),\n            main.title = \"Santa Barbara Landcover\")"
  },
  {
    "objectID": "blog-posts/sb-landcover/landcover_classification.html#acknowledgements",
    "href": "blog-posts/sb-landcover/landcover_classification.html#acknowledgements",
    "title": "Landcover Classification",
    "section": "",
    "text": "This post was heavily reused from an assignment for the graduate course EDS 223: Geospatial Analysis and Remote Sensing in the Masters of Environmental Data Science (MEDS) program, created by Dr. Ruth Oliver."
  },
  {
    "objectID": "blog-posts/BII-change/phoenix_bii_change.html",
    "href": "blog-posts/BII-change/phoenix_bii_change.html",
    "title": "Biodiversity Intactness Index change in Phoenix, AZ",
    "section": "",
    "text": "In 2021, Maricopa County —home to the Phoenix metropolitan area— was identified as the U.S. county with the most significant increase in developed land since 2001 [1]. This rapid urban sprawl has profound implications for biodiversity and the health of surrounding natural ecosystems.\nIn this notebook, I investigate the impacts of urban expansion by analyzing a dataset that captures values for the Biodiversity Intactness Index (BII) [2]. The Biodiversity Intactness Index (BII) measures biodiversity change using abundance data on plants, fungi and animals worldwide. The BII shows how local terrestrial biodiversity responds to human pressures such as land use change and intensification [3].\nI examine changes in BII in the Phoenix county subdivision area between 2017 and 2020, shedding light on how urban growth affects biodiversity over time.\nSee my GitHub repository: https://github.com/marinakochuten/phoenix-bii-change"
  },
  {
    "objectID": "blog-posts/BII-change/phoenix_bii_change.html#about",
    "href": "blog-posts/BII-change/phoenix_bii_change.html#about",
    "title": "Biodiversity Intactness Index change in Phoenix, AZ",
    "section": "",
    "text": "In 2021, Maricopa County —home to the Phoenix metropolitan area— was identified as the U.S. county with the most significant increase in developed land since 2001 [1]. This rapid urban sprawl has profound implications for biodiversity and the health of surrounding natural ecosystems.\nIn this notebook, I investigate the impacts of urban expansion by analyzing a dataset that captures values for the Biodiversity Intactness Index (BII) [2]. The Biodiversity Intactness Index (BII) measures biodiversity change using abundance data on plants, fungi and animals worldwide. The BII shows how local terrestrial biodiversity responds to human pressures such as land use change and intensification [3].\nI examine changes in BII in the Phoenix county subdivision area between 2017 and 2020, shedding light on how urban growth affects biodiversity over time.\nSee my GitHub repository: https://github.com/marinakochuten/phoenix-bii-change"
  },
  {
    "objectID": "blog-posts/BII-change/phoenix_bii_change.html#highlights",
    "href": "blog-posts/BII-change/phoenix_bii_change.html#highlights",
    "title": "Biodiversity Intactness Index change in Phoenix, AZ",
    "section": "Highlights",
    "text": "Highlights\n\nAccess data through an API\nVector raster intersctions and raster algebra\nVisualizing spatial data using matplotlib"
  },
  {
    "objectID": "blog-posts/BII-change/phoenix_bii_change.html#data",
    "href": "blog-posts/BII-change/phoenix_bii_change.html#data",
    "title": "Biodiversity Intactness Index change in Phoenix, AZ",
    "section": "Data",
    "text": "Data\nBiodiversity Intactness Index (BII) Time Series: I access the io-biodiversity collection from the Microsoft Planetary Computer STAC catalog using an API. In my analysis, I use the 2017 and 2020 rasters covering the Phoenix subdivision.\nCitation: Microsoft Planetary Computer data catalogue (2024), io-biodiversity Collection [Data set] Available from: https://planetarycomputer.microsoft.com/dataset/io-biodiversity. Access date: December 3, 2024.\nPhoenix Subdivision Shapefile: I use a shapefile containing county boundary lines from the U.S. Census Bureau\nCitation: U.S. Census Bureau. (2022). “tl_2022_04_cousub”, TIGER/Line Shapefiles. https://www.census.gov/cgi-bin/geo/shapefiles/index.php?year=2022&layergroup=County+Subdivisions. Access date: December 3, 2024."
  },
  {
    "objectID": "blog-posts/BII-change/phoenix_bii_change.html#references",
    "href": "blog-posts/BII-change/phoenix_bii_change.html#references",
    "title": "Biodiversity Intactness Index change in Phoenix, AZ",
    "section": "References",
    "text": "References\n[1] Z. Levitt and J. Eng, “Where America’s developed areas are growing: ‘Way off into the horizon’,” The Washington Post, Aug. 2021, Available: https://www.washingtonpost.com/nation/interactive/2021/land-development-urban-growth-maps/ [Accessed: Nov. 22, 2024]\n[2] F. Gassert, J. Mazzarello, and S. Hyde, “Global 100m Projections of Biodiversity Intactness for the years 2017-2020 [Technical Whitepaper].” Aug. 2022. Available: https://ai4edatasetspublicassets.blob.core.windows.net/assets/pdfs/io -biodiversity/Biodiversity_Intactness_whitepaper.pdf\n[3] Measurement of Biodiversity. (2024, 16 November). In Wikipedia. https://en.wikipedia.org/wiki/Measurement_of_biodiversity"
  },
  {
    "objectID": "blog-posts/BII-change/phoenix_bii_change.html#import-libraries",
    "href": "blog-posts/BII-change/phoenix_bii_change.html#import-libraries",
    "title": "Biodiversity Intactness Index change in Phoenix, AZ",
    "section": "Import libraries",
    "text": "Import libraries\n\n# Import libraries ----\n# For general analysis\nimport numpy as np\nimport pandas as pd\n\n# For spatial data\nimport geopandas as gpd\nimport rioxarray as rioxr\nfrom shapely import box\n\n# For STAC API\nimport pystac_client  # To access STAC catalogs\nimport planetary_computer  # To sign items from the MPC STAC catalog\n\n# For plotting\nimport matplotlib.pyplot as plt\nfrom IPython.display import Image  # To nicely display images\nimport contextily as cx   # For basemap\nimport matplotlib.patches as mpatches   # For creating custom legend\n\n# Set Pandas to display all columns\npd.set_option(\"display.max.columns\", None)"
  },
  {
    "objectID": "blog-posts/BII-change/phoenix_bii_change.html#access-data-bii-time-series",
    "href": "blog-posts/BII-change/phoenix_bii_change.html#access-data-bii-time-series",
    "title": "Biodiversity Intactness Index change in Phoenix, AZ",
    "section": "Access Data: BII Time Series",
    "text": "Access Data: BII Time Series\nFor the BII time series, I access the io-biodiversity collection from the Microsoft Planetary Computer STAC catalog and use the 2017 and 2020 rasters covering the Phoenix subdivision (bounding box coordinates:[-112.826843, 32.974108, -111.184387, 33.863574])\n\n# Create bounding box for search\nbbox = [-112.826843, 32.974108, -111.184387, 33.863574]\nbbox\n\n[-112.826843, 32.974108, -111.184387, 33.863574]\n\n\n\n# Open MPC data catalog (establish connection to API)\ncatalog = pystac_client.Client.open(\n    \"https://planetarycomputer.microsoft.com/api/stac/v1\",\n    modifier=planetary_computer.sign_inplace,\n)\n\n# Search MPC catalog\nsearch = catalog.search(collections = ['io-biodiversity'],\n                       bbox = bbox\n                       )\n\n# Retrive search items\nitems = search.item_collection()\nprint(f\"Returned {len(items)} Items\")\nitems\n\nReturned 4 Items\n\n\n\n\n\n\n    \n        \n            \n                \n                    \n        \n            type\n            \"FeatureCollection\"\n        \n    \n                \n            \n                \n                    \n        features[] 4 items\n        \n            \n        \n            \n                \n        \n            0\n            \n        \n            \n                \n        \n            type\n            \"Feature\"\n        \n    \n            \n        \n            \n                \n        \n            stac_version\n            \"1.0.0\"\n        \n    \n            \n        \n            \n                \n        stac_extensions[] 3 items\n        \n            \n        \n            \n                \n        \n            0\n            \"https://stac-extensions.github.io/projection/v1.0.0/schema.json\"\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            1\n            \"https://stac-extensions.github.io/raster/v1.1.0/schema.json\"\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            2\n            \"https://stac-extensions.github.io/version/v1.1.0/schema.json\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n            \n                \n        \n            id\n            \"bii_2020_34.74464974521749_-115.38597824385106_cog\"\n        \n    \n            \n        \n            \n                \n        \n            geometry\n            \n        \n            \n                \n        \n            type\n            \"Polygon\"\n        \n    \n            \n        \n            \n                \n        coordinates[] 1 items\n        \n            \n        \n            \n                \n        0[] 9 items\n        \n            \n        \n            \n                \n        0[] 2 items\n        \n            \n        \n            \n                \n        \n            0\n            -114.7625474\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            1\n            27.565314\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        1[] 2 items\n        \n            \n        \n            \n                \n        \n            0\n            -108.2066425\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            1\n            27.565314\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        2[] 2 items\n        \n            \n        \n            \n                \n        \n            0\n            -108.2066425\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            1\n            34.7446497\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        3[] 2 items\n        \n            \n        \n            \n                \n        \n            0\n            -115.3859782\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            1\n            34.7446497\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        4[] 2 items\n        \n            \n        \n            \n                \n        \n            0\n            -115.3859782\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            1\n            29.5649638\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        5[] 2 items\n        \n            \n        \n            \n                \n        \n            0\n            -115.3581305\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            1\n            28.0791503\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        6[] 2 items\n        \n            \n        \n            \n                \n        \n            0\n            -115.2036202\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            1\n            27.8662496\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        7[] 2 items\n        \n            \n        \n            \n                \n        \n            0\n            -114.9988044\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            1\n            27.7099428\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        8[] 2 items\n        \n            \n        \n            \n                \n        \n            0\n            -114.7625474\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            1\n            27.565314\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n    \n            \n        \n            \n                \n        bbox[] 4 items\n        \n            \n        \n            \n                \n        \n            0\n            -115.3859782\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            1\n            27.565314\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            2\n            -108.2066425\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            3\n            34.7446497\n        \n    \n            \n        \n    \n        \n    \n            \n        \n            \n                \n        \n            properties\n            \n        \n            \n                \n        \n            datetime\n            None\n        \n    \n            \n        \n            \n                \n        \n            proj:epsg\n            4326\n        \n    \n            \n        \n            \n                \n        proj:shape[] 2 items\n        \n            \n        \n            \n                \n        \n            0\n            7992\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            1\n            7992\n        \n    \n            \n        \n    \n        \n    \n            \n        \n            \n                \n        \n            end_datetime\n            \"2020-12-31T23:59:59Z\"\n        \n    \n            \n        \n            \n                \n        proj:transform[] 9 items\n        \n            \n        \n            \n                \n        \n            0\n            0.0008983152841195215\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            1\n            0.0\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            2\n            -115.38597824385106\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            3\n            0.0\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            4\n            -0.0008983152841195215\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            5\n            34.74464974521749\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            6\n            0.0\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            7\n            0.0\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            8\n            1.0\n        \n    \n            \n        \n    \n        \n    \n            \n        \n            \n                \n        \n            start_datetime\n            \"2020-01-01T00:00:00Z\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n            \n                \n        links[] 5 items\n        \n            \n        \n            \n                \n        \n            0\n            \n        \n            \n                \n        \n            rel\n            \"collection\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://planetarycomputer.microsoft.com/api/stac/v1/collections/io-biodiversity\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            1\n            \n        \n            \n                \n        \n            rel\n            \"parent\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://planetarycomputer.microsoft.com/api/stac/v1/collections/io-biodiversity\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            2\n            \n        \n            \n                \n        \n            rel\n            \"root\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://planetarycomputer.microsoft.com/api/stac/v1\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Microsoft Planetary Computer STAC API\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            3\n            \n        \n            \n                \n        \n            rel\n            \"self\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://planetarycomputer.microsoft.com/api/stac/v1/collections/io-biodiversity/items/bii_2020_34.74464974521749_-115.38597824385106_cog\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/geo+json\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            4\n            \n        \n            \n                \n        \n            rel\n            \"preview\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://planetarycomputer.microsoft.com/api/data/v1/item/map?collection=io-biodiversity&item=bii_2020_34.74464974521749_-115.38597824385106_cog\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"text/html\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Map of item\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n    \n            \n        \n            \n                \n        \n            assets\n            \n        \n            \n                \n        \n            data\n            \n        \n            \n                \n        \n            href\n            \"https://pcdata01euw.blob.core.windows.net/impact/bii-v1/bii_2020/bii_2020_34.74464974521749_-115.38597824385106_cog.tif?st=2024-12-12T00%3A25%3A30Z&se=2024-12-13T01%3A10%3A30Z&sp=rl&sv=2024-05-04&sr=c&skoid=9c8ff44a-6a2c-4dfb-b298-1c9212f64d9a&sktid=72f988bf-86f1-41af-91ab-2d7cd011db47&skt=2024-12-12T14%3A50%3A12Z&ske=2024-12-19T14%3A50%3A12Z&sks=b&skv=2024-05-04&sig=wSVIBt95DPkLDSnBaVv0RbfnRgEhYRCL4sEMwMxQE2c%3D\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"image/tiff; application=geotiff; profile=cloud-optimized\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Biodiversity Intactness\"\n        \n    \n            \n        \n            \n                \n        \n            description\n            \"Terrestrial biodiversity intactness at 100m resolution\"\n        \n    \n            \n        \n            \n                \n        \n            version\n            \"v1\"\n        \n    \n            \n        \n            \n                \n        raster:bands[] 1 items\n        \n            \n        \n            \n                \n        \n            0\n            \n        \n            \n                \n        \n            sampling\n            \"area\"\n        \n    \n            \n        \n            \n                \n        \n            data_type\n            \"float32\"\n        \n    \n            \n        \n            \n                \n        \n            spatial_resolution\n            100\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n    \n            \n        \n            \n                \n        roles[] 1 items\n        \n            \n        \n            \n                \n        \n            0\n            \"data\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n    \n            \n        \n            \n                \n        \n            tilejson\n            \n        \n            \n                \n        \n            href\n            \"https://planetarycomputer.microsoft.com/api/data/v1/item/tilejson.json?collection=io-biodiversity&item=bii_2020_34.74464974521749_-115.38597824385106_cog&assets=data&tile_format=png&colormap_name=io-bii&rescale=0%2C1&expression=0.97%2A%28data_b1%2A%2A3.84%29&format=png\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"TileJSON with default rendering\"\n        \n    \n            \n        \n            \n                \n        roles[] 1 items\n        \n            \n        \n            \n                \n        \n            0\n            \"tiles\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n    \n            \n        \n            \n                \n        \n            rendered_preview\n            \n        \n            \n                \n        \n            href\n            \"https://planetarycomputer.microsoft.com/api/data/v1/item/preview.png?collection=io-biodiversity&item=bii_2020_34.74464974521749_-115.38597824385106_cog&assets=data&tile_format=png&colormap_name=io-bii&rescale=0%2C1&expression=0.97%2A%28data_b1%2A%2A3.84%29&format=png\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"image/png\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Rendered preview\"\n        \n    \n            \n        \n            \n                \n        \n            rel\n            \"preview\"\n        \n    \n            \n        \n            \n                \n        roles[] 1 items\n        \n            \n        \n            \n                \n        \n            0\n            \"overview\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n    \n            \n        \n            \n                \n        \n            collection\n            \"io-biodiversity\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            1\n            \n        \n            \n                \n        \n            type\n            \"Feature\"\n        \n    \n            \n        \n            \n                \n        \n            stac_version\n            \"1.0.0\"\n        \n    \n            \n        \n            \n                \n        stac_extensions[] 3 items\n        \n            \n        \n            \n                \n        \n            0\n            \"https://stac-extensions.github.io/projection/v1.0.0/schema.json\"\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            1\n            \"https://stac-extensions.github.io/raster/v1.1.0/schema.json\"\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            2\n            \"https://stac-extensions.github.io/version/v1.1.0/schema.json\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n            \n                \n        \n            id\n            \"bii_2019_34.74464974521749_-115.38597824385106_cog\"\n        \n    \n            \n        \n            \n                \n        \n            geometry\n            \n        \n            \n                \n        \n            type\n            \"Polygon\"\n        \n    \n            \n        \n            \n                \n        coordinates[] 1 items\n        \n            \n        \n            \n                \n        0[] 10 items\n        \n            \n        \n            \n                \n        0[] 2 items\n        \n            \n        \n            \n                \n        \n            0\n            -114.7625474\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            1\n            27.565314\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        1[] 2 items\n        \n            \n        \n            \n                \n        \n            0\n            -108.2066425\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            1\n            27.565314\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        2[] 2 items\n        \n            \n        \n            \n                \n        \n            0\n            -108.2066425\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            1\n            34.7446497\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        3[] 2 items\n        \n            \n        \n            \n                \n        \n            0\n            -115.3859782\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            1\n            34.7446497\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        4[] 2 items\n        \n            \n        \n            \n                \n        \n            0\n            -115.3859782\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            1\n            29.5649638\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        5[] 2 items\n        \n            \n        \n            \n                \n        \n            0\n            -115.3581305\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            1\n            28.0791503\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        6[] 2 items\n        \n            \n        \n            \n                \n        \n            0\n            -115.2161967\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            1\n            27.8761311\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        7[] 2 items\n        \n            \n        \n            \n                \n        \n            0\n            -115.0068892\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            1\n            27.7180276\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        8[] 2 items\n        \n            \n        \n            \n                \n        \n            0\n            -114.8469891\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            1\n            27.6174163\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        9[] 2 items\n        \n            \n        \n            \n                \n        \n            0\n            -114.7625474\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            1\n            27.565314\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n    \n            \n        \n            \n                \n        bbox[] 4 items\n        \n            \n        \n            \n                \n        \n            0\n            -115.3859782\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            1\n            27.565314\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            2\n            -108.2066425\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            3\n            34.7446497\n        \n    \n            \n        \n    \n        \n    \n            \n        \n            \n                \n        \n            properties\n            \n        \n            \n                \n        \n            datetime\n            None\n        \n    \n            \n        \n            \n                \n        \n            proj:epsg\n            4326\n        \n    \n            \n        \n            \n                \n        proj:shape[] 2 items\n        \n            \n        \n            \n                \n        \n            0\n            7992\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            1\n            7992\n        \n    \n            \n        \n    \n        \n    \n            \n        \n            \n                \n        \n            end_datetime\n            \"2019-12-31T23:59:59Z\"\n        \n    \n            \n        \n            \n                \n        proj:transform[] 9 items\n        \n            \n        \n            \n                \n        \n            0\n            0.0008983152841195215\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            1\n            0.0\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            2\n            -115.38597824385106\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            3\n            0.0\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            4\n            -0.0008983152841195215\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            5\n            34.74464974521749\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            6\n            0.0\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            7\n            0.0\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            8\n            1.0\n        \n    \n            \n        \n    \n        \n    \n            \n        \n            \n                \n        \n            start_datetime\n            \"2019-01-01T00:00:00Z\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n            \n                \n        links[] 5 items\n        \n            \n        \n            \n                \n        \n            0\n            \n        \n            \n                \n        \n            rel\n            \"collection\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://planetarycomputer.microsoft.com/api/stac/v1/collections/io-biodiversity\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            1\n            \n        \n            \n                \n        \n            rel\n            \"parent\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://planetarycomputer.microsoft.com/api/stac/v1/collections/io-biodiversity\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            2\n            \n        \n            \n                \n        \n            rel\n            \"root\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://planetarycomputer.microsoft.com/api/stac/v1\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Microsoft Planetary Computer STAC API\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            3\n            \n        \n            \n                \n        \n            rel\n            \"self\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://planetarycomputer.microsoft.com/api/stac/v1/collections/io-biodiversity/items/bii_2019_34.74464974521749_-115.38597824385106_cog\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/geo+json\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            4\n            \n        \n            \n                \n        \n            rel\n            \"preview\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://planetarycomputer.microsoft.com/api/data/v1/item/map?collection=io-biodiversity&item=bii_2019_34.74464974521749_-115.38597824385106_cog\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"text/html\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Map of item\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n    \n            \n        \n            \n                \n        \n            assets\n            \n        \n            \n                \n        \n            data\n            \n        \n            \n                \n        \n            href\n            \"https://pcdata01euw.blob.core.windows.net/impact/bii-v1/bii_2019/bii_2019_34.74464974521749_-115.38597824385106_cog.tif?st=2024-12-12T00%3A25%3A30Z&se=2024-12-13T01%3A10%3A30Z&sp=rl&sv=2024-05-04&sr=c&skoid=9c8ff44a-6a2c-4dfb-b298-1c9212f64d9a&sktid=72f988bf-86f1-41af-91ab-2d7cd011db47&skt=2024-12-12T14%3A50%3A12Z&ske=2024-12-19T14%3A50%3A12Z&sks=b&skv=2024-05-04&sig=wSVIBt95DPkLDSnBaVv0RbfnRgEhYRCL4sEMwMxQE2c%3D\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"image/tiff; application=geotiff; profile=cloud-optimized\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Biodiversity Intactness\"\n        \n    \n            \n        \n            \n                \n        \n            description\n            \"Terrestrial biodiversity intactness at 100m resolution\"\n        \n    \n            \n        \n            \n                \n        \n            version\n            \"v1\"\n        \n    \n            \n        \n            \n                \n        raster:bands[] 1 items\n        \n            \n        \n            \n                \n        \n            0\n            \n        \n            \n                \n        \n            sampling\n            \"area\"\n        \n    \n            \n        \n            \n                \n        \n            data_type\n            \"float32\"\n        \n    \n            \n        \n            \n                \n        \n            spatial_resolution\n            100\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n    \n            \n        \n            \n                \n        roles[] 1 items\n        \n            \n        \n            \n                \n        \n            0\n            \"data\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n    \n            \n        \n            \n                \n        \n            tilejson\n            \n        \n            \n                \n        \n            href\n            \"https://planetarycomputer.microsoft.com/api/data/v1/item/tilejson.json?collection=io-biodiversity&item=bii_2019_34.74464974521749_-115.38597824385106_cog&assets=data&tile_format=png&colormap_name=io-bii&rescale=0%2C1&expression=0.97%2A%28data_b1%2A%2A3.84%29&format=png\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"TileJSON with default rendering\"\n        \n    \n            \n        \n            \n                \n        roles[] 1 items\n        \n            \n        \n            \n                \n        \n            0\n            \"tiles\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n    \n            \n        \n            \n                \n        \n            rendered_preview\n            \n        \n            \n                \n        \n            href\n            \"https://planetarycomputer.microsoft.com/api/data/v1/item/preview.png?collection=io-biodiversity&item=bii_2019_34.74464974521749_-115.38597824385106_cog&assets=data&tile_format=png&colormap_name=io-bii&rescale=0%2C1&expression=0.97%2A%28data_b1%2A%2A3.84%29&format=png\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"image/png\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Rendered preview\"\n        \n    \n            \n        \n            \n                \n        \n            rel\n            \"preview\"\n        \n    \n            \n        \n            \n                \n        roles[] 1 items\n        \n            \n        \n            \n                \n        \n            0\n            \"overview\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n    \n            \n        \n            \n                \n        \n            collection\n            \"io-biodiversity\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            2\n            \n        \n            \n                \n        \n            type\n            \"Feature\"\n        \n    \n            \n        \n            \n                \n        \n            stac_version\n            \"1.0.0\"\n        \n    \n            \n        \n            \n                \n        stac_extensions[] 3 items\n        \n            \n        \n            \n                \n        \n            0\n            \"https://stac-extensions.github.io/projection/v1.0.0/schema.json\"\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            1\n            \"https://stac-extensions.github.io/raster/v1.1.0/schema.json\"\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            2\n            \"https://stac-extensions.github.io/version/v1.1.0/schema.json\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n            \n                \n        \n            id\n            \"bii_2018_34.74464974521749_-115.38597824385106_cog\"\n        \n    \n            \n        \n            \n                \n        \n            geometry\n            \n        \n            \n                \n        \n            type\n            \"Polygon\"\n        \n    \n            \n        \n            \n                \n        coordinates[] 1 items\n        \n            \n        \n            \n                \n        0[] 10 items\n        \n            \n        \n            \n                \n        0[] 2 items\n        \n            \n        \n            \n                \n        \n            0\n            -114.7625474\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            1\n            27.565314\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        1[] 2 items\n        \n            \n        \n            \n                \n        \n            0\n            -108.2066425\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            1\n            27.565314\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        2[] 2 items\n        \n            \n        \n            \n                \n        \n            0\n            -108.2066425\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            1\n            34.7446497\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        3[] 2 items\n        \n            \n        \n            \n                \n        \n            0\n            -115.3859782\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            1\n            34.7446497\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        4[] 2 items\n        \n            \n        \n            \n                \n        \n            0\n            -115.3859782\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            1\n            29.5649638\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        5[] 2 items\n        \n            \n        \n            \n                \n        \n            0\n            -115.3581305\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            1\n            28.0791503\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        6[] 2 items\n        \n            \n        \n            \n                \n        \n            0\n            -115.2179933\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            1\n            27.8869109\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        7[] 2 items\n        \n            \n        \n            \n                \n        \n            0\n            -115.1775691\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            1\n            27.8491816\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        8[] 2 items\n        \n            \n        \n            \n                \n        \n            0\n            -115.0014993\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            1\n            27.7117394\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        9[] 2 items\n        \n            \n        \n            \n                \n        \n            0\n            -114.7625474\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            1\n            27.565314\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n    \n            \n        \n            \n                \n        bbox[] 4 items\n        \n            \n        \n            \n                \n        \n            0\n            -115.3859782\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            1\n            27.565314\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            2\n            -108.2066425\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            3\n            34.7446497\n        \n    \n            \n        \n    \n        \n    \n            \n        \n            \n                \n        \n            properties\n            \n        \n            \n                \n        \n            datetime\n            None\n        \n    \n            \n        \n            \n                \n        \n            proj:epsg\n            4326\n        \n    \n            \n        \n            \n                \n        proj:shape[] 2 items\n        \n            \n        \n            \n                \n        \n            0\n            7992\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            1\n            7992\n        \n    \n            \n        \n    \n        \n    \n            \n        \n            \n                \n        \n            end_datetime\n            \"2018-12-31T23:59:59Z\"\n        \n    \n            \n        \n            \n                \n        proj:transform[] 9 items\n        \n            \n        \n            \n                \n        \n            0\n            0.0008983152841195215\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            1\n            0.0\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            2\n            -115.38597824385106\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            3\n            0.0\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            4\n            -0.0008983152841195215\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            5\n            34.74464974521749\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            6\n            0.0\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            7\n            0.0\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            8\n            1.0\n        \n    \n            \n        \n    \n        \n    \n            \n        \n            \n                \n        \n            start_datetime\n            \"2018-01-01T00:00:00Z\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n            \n                \n        links[] 5 items\n        \n            \n        \n            \n                \n        \n            0\n            \n        \n            \n                \n        \n            rel\n            \"collection\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://planetarycomputer.microsoft.com/api/stac/v1/collections/io-biodiversity\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            1\n            \n        \n            \n                \n        \n            rel\n            \"parent\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://planetarycomputer.microsoft.com/api/stac/v1/collections/io-biodiversity\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            2\n            \n        \n            \n                \n        \n            rel\n            \"root\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://planetarycomputer.microsoft.com/api/stac/v1\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Microsoft Planetary Computer STAC API\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            3\n            \n        \n            \n                \n        \n            rel\n            \"self\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://planetarycomputer.microsoft.com/api/stac/v1/collections/io-biodiversity/items/bii_2018_34.74464974521749_-115.38597824385106_cog\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/geo+json\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            4\n            \n        \n            \n                \n        \n            rel\n            \"preview\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://planetarycomputer.microsoft.com/api/data/v1/item/map?collection=io-biodiversity&item=bii_2018_34.74464974521749_-115.38597824385106_cog\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"text/html\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Map of item\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n    \n            \n        \n            \n                \n        \n            assets\n            \n        \n            \n                \n        \n            data\n            \n        \n            \n                \n        \n            href\n            \"https://pcdata01euw.blob.core.windows.net/impact/bii-v1/bii_2018/bii_2018_34.74464974521749_-115.38597824385106_cog.tif?st=2024-12-12T00%3A25%3A30Z&se=2024-12-13T01%3A10%3A30Z&sp=rl&sv=2024-05-04&sr=c&skoid=9c8ff44a-6a2c-4dfb-b298-1c9212f64d9a&sktid=72f988bf-86f1-41af-91ab-2d7cd011db47&skt=2024-12-12T14%3A50%3A12Z&ske=2024-12-19T14%3A50%3A12Z&sks=b&skv=2024-05-04&sig=wSVIBt95DPkLDSnBaVv0RbfnRgEhYRCL4sEMwMxQE2c%3D\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"image/tiff; application=geotiff; profile=cloud-optimized\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Biodiversity Intactness\"\n        \n    \n            \n        \n            \n                \n        \n            description\n            \"Terrestrial biodiversity intactness at 100m resolution\"\n        \n    \n            \n        \n            \n                \n        \n            version\n            \"v1\"\n        \n    \n            \n        \n            \n                \n        raster:bands[] 1 items\n        \n            \n        \n            \n                \n        \n            0\n            \n        \n            \n                \n        \n            sampling\n            \"area\"\n        \n    \n            \n        \n            \n                \n        \n            data_type\n            \"float32\"\n        \n    \n            \n        \n            \n                \n        \n            spatial_resolution\n            100\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n    \n            \n        \n            \n                \n        roles[] 1 items\n        \n            \n        \n            \n                \n        \n            0\n            \"data\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n    \n            \n        \n            \n                \n        \n            tilejson\n            \n        \n            \n                \n        \n            href\n            \"https://planetarycomputer.microsoft.com/api/data/v1/item/tilejson.json?collection=io-biodiversity&item=bii_2018_34.74464974521749_-115.38597824385106_cog&assets=data&tile_format=png&colormap_name=io-bii&rescale=0%2C1&expression=0.97%2A%28data_b1%2A%2A3.84%29&format=png\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"TileJSON with default rendering\"\n        \n    \n            \n        \n            \n                \n        roles[] 1 items\n        \n            \n        \n            \n                \n        \n            0\n            \"tiles\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n    \n            \n        \n            \n                \n        \n            rendered_preview\n            \n        \n            \n                \n        \n            href\n            \"https://planetarycomputer.microsoft.com/api/data/v1/item/preview.png?collection=io-biodiversity&item=bii_2018_34.74464974521749_-115.38597824385106_cog&assets=data&tile_format=png&colormap_name=io-bii&rescale=0%2C1&expression=0.97%2A%28data_b1%2A%2A3.84%29&format=png\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"image/png\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Rendered preview\"\n        \n    \n            \n        \n            \n                \n        \n            rel\n            \"preview\"\n        \n    \n            \n        \n            \n                \n        roles[] 1 items\n        \n            \n        \n            \n                \n        \n            0\n            \"overview\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n    \n            \n        \n            \n                \n        \n            collection\n            \"io-biodiversity\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            3\n            \n        \n            \n                \n        \n            type\n            \"Feature\"\n        \n    \n            \n        \n            \n                \n        \n            stac_version\n            \"1.0.0\"\n        \n    \n            \n        \n            \n                \n        stac_extensions[] 3 items\n        \n            \n        \n            \n                \n        \n            0\n            \"https://stac-extensions.github.io/projection/v1.0.0/schema.json\"\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            1\n            \"https://stac-extensions.github.io/raster/v1.1.0/schema.json\"\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            2\n            \"https://stac-extensions.github.io/version/v1.1.0/schema.json\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n            \n                \n        \n            id\n            \"bii_2017_34.74464974521749_-115.38597824385106_cog\"\n        \n    \n            \n        \n            \n                \n        \n            geometry\n            \n        \n            \n                \n        \n            type\n            \"Polygon\"\n        \n    \n            \n        \n            \n                \n        coordinates[] 1 items\n        \n            \n        \n            \n                \n        0[] 10 items\n        \n            \n        \n            \n                \n        0[] 2 items\n        \n            \n        \n            \n                \n        \n            0\n            -114.7616491\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            1\n            27.565314\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        1[] 2 items\n        \n            \n        \n            \n                \n        \n            0\n            -108.2066425\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            1\n            27.565314\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        2[] 2 items\n        \n            \n        \n            \n                \n        \n            0\n            -108.2066425\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            1\n            34.7446497\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        3[] 2 items\n        \n            \n        \n            \n                \n        \n            0\n            -115.3859782\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            1\n            34.7446497\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        4[] 2 items\n        \n            \n        \n            \n                \n        \n            0\n            -115.3859782\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            1\n            29.5649638\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        5[] 2 items\n        \n            \n        \n            \n                \n        \n            0\n            -115.3581305\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            1\n            28.0791503\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        6[] 2 items\n        \n            \n        \n            \n                \n        \n            0\n            -115.2036202\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            1\n            27.8662496\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        7[] 2 items\n        \n            \n        \n            \n                \n        \n            0\n            -115.0068892\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            1\n            27.7180276\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        8[] 2 items\n        \n            \n        \n            \n                \n        \n            0\n            -114.8469891\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            1\n            27.6174163\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        9[] 2 items\n        \n            \n        \n            \n                \n        \n            0\n            -114.7616491\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            1\n            27.565314\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n    \n            \n        \n            \n                \n        bbox[] 4 items\n        \n            \n        \n            \n                \n        \n            0\n            -115.3859782\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            1\n            27.565314\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            2\n            -108.2066425\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            3\n            34.7446497\n        \n    \n            \n        \n    \n        \n    \n            \n        \n            \n                \n        \n            properties\n            \n        \n            \n                \n        \n            datetime\n            None\n        \n    \n            \n        \n            \n                \n        \n            proj:epsg\n            4326\n        \n    \n            \n        \n            \n                \n        proj:shape[] 2 items\n        \n            \n        \n            \n                \n        \n            0\n            7992\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            1\n            7992\n        \n    \n            \n        \n    \n        \n    \n            \n        \n            \n                \n        \n            end_datetime\n            \"2017-12-31T23:59:59Z\"\n        \n    \n            \n        \n            \n                \n        proj:transform[] 9 items\n        \n            \n        \n            \n                \n        \n            0\n            0.0008983152841195215\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            1\n            0.0\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            2\n            -115.38597824385106\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            3\n            0.0\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            4\n            -0.0008983152841195215\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            5\n            34.74464974521749\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            6\n            0.0\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            7\n            0.0\n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            8\n            1.0\n        \n    \n            \n        \n    \n        \n    \n            \n        \n            \n                \n        \n            start_datetime\n            \"2017-01-01T00:00:00Z\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n            \n                \n        links[] 5 items\n        \n            \n        \n            \n                \n        \n            0\n            \n        \n            \n                \n        \n            rel\n            \"collection\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://planetarycomputer.microsoft.com/api/stac/v1/collections/io-biodiversity\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            1\n            \n        \n            \n                \n        \n            rel\n            \"parent\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://planetarycomputer.microsoft.com/api/stac/v1/collections/io-biodiversity\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            2\n            \n        \n            \n                \n        \n            rel\n            \"root\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://planetarycomputer.microsoft.com/api/stac/v1\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Microsoft Planetary Computer STAC API\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            3\n            \n        \n            \n                \n        \n            rel\n            \"self\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://planetarycomputer.microsoft.com/api/stac/v1/collections/io-biodiversity/items/bii_2017_34.74464974521749_-115.38597824385106_cog\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/geo+json\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n            \n        \n            \n                \n        \n            4\n            \n        \n            \n                \n        \n            rel\n            \"preview\"\n        \n    \n            \n        \n            \n                \n        \n            href\n            \"https://planetarycomputer.microsoft.com/api/data/v1/item/map?collection=io-biodiversity&item=bii_2017_34.74464974521749_-115.38597824385106_cog\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"text/html\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Map of item\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n    \n            \n        \n            \n                \n        \n            assets\n            \n        \n            \n                \n        \n            data\n            \n        \n            \n                \n        \n            href\n            \"https://pcdata01euw.blob.core.windows.net/impact/bii-v1/bii_2017/bii_2017_34.74464974521749_-115.38597824385106_cog.tif?st=2024-12-12T00%3A25%3A30Z&se=2024-12-13T01%3A10%3A30Z&sp=rl&sv=2024-05-04&sr=c&skoid=9c8ff44a-6a2c-4dfb-b298-1c9212f64d9a&sktid=72f988bf-86f1-41af-91ab-2d7cd011db47&skt=2024-12-12T14%3A50%3A12Z&ske=2024-12-19T14%3A50%3A12Z&sks=b&skv=2024-05-04&sig=wSVIBt95DPkLDSnBaVv0RbfnRgEhYRCL4sEMwMxQE2c%3D\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"image/tiff; application=geotiff; profile=cloud-optimized\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Biodiversity Intactness\"\n        \n    \n            \n        \n            \n                \n        \n            description\n            \"Terrestrial biodiversity intactness at 100m resolution\"\n        \n    \n            \n        \n            \n                \n        \n            version\n            \"v1\"\n        \n    \n            \n        \n            \n                \n        raster:bands[] 1 items\n        \n            \n        \n            \n                \n        \n            0\n            \n        \n            \n                \n        \n            sampling\n            \"area\"\n        \n    \n            \n        \n            \n                \n        \n            data_type\n            \"float32\"\n        \n    \n            \n        \n            \n                \n        \n            spatial_resolution\n            100\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n    \n            \n        \n            \n                \n        roles[] 1 items\n        \n            \n        \n            \n                \n        \n            0\n            \"data\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n    \n            \n        \n            \n                \n        \n            tilejson\n            \n        \n            \n                \n        \n            href\n            \"https://planetarycomputer.microsoft.com/api/data/v1/item/tilejson.json?collection=io-biodiversity&item=bii_2017_34.74464974521749_-115.38597824385106_cog&assets=data&tile_format=png&colormap_name=io-bii&rescale=0%2C1&expression=0.97%2A%28data_b1%2A%2A3.84%29&format=png\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"application/json\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"TileJSON with default rendering\"\n        \n    \n            \n        \n            \n                \n        roles[] 1 items\n        \n            \n        \n            \n                \n        \n            0\n            \"tiles\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n    \n            \n        \n            \n                \n        \n            rendered_preview\n            \n        \n            \n                \n        \n            href\n            \"https://planetarycomputer.microsoft.com/api/data/v1/item/preview.png?collection=io-biodiversity&item=bii_2017_34.74464974521749_-115.38597824385106_cog&assets=data&tile_format=png&colormap_name=io-bii&rescale=0%2C1&expression=0.97%2A%28data_b1%2A%2A3.84%29&format=png\"\n        \n    \n            \n        \n            \n                \n        \n            type\n            \"image/png\"\n        \n    \n            \n        \n            \n                \n        \n            title\n            \"Rendered preview\"\n        \n    \n            \n        \n            \n                \n        \n            rel\n            \"preview\"\n        \n    \n            \n        \n            \n                \n        roles[] 1 items\n        \n            \n        \n            \n                \n        \n            0\n            \"overview\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n    \n            \n        \n            \n                \n        \n            collection\n            \"io-biodiversity\"\n        \n    \n            \n        \n    \n        \n    \n            \n        \n    \n        \n    \n                \n            \n        \n    \n\n\n\nThere are 4 items in my search, one raster for each year in the range 2017 - 2020."
  },
  {
    "objectID": "blog-posts/BII-change/phoenix_bii_change.html#bii-time-series-exploration",
    "href": "blog-posts/BII-change/phoenix_bii_change.html#bii-time-series-exploration",
    "title": "Biodiversity Intactness Index change in Phoenix, AZ",
    "section": "BII Time Series Exploration",
    "text": "BII Time Series Exploration\nFirst, I’ll take a quick look at one of the pre-redered images from the catalog\n\n# Select unique search items for 2020 and 2017\nitem2020 = items[0]\nitem2017 = items[3]\n\n# Display a pre-rendered image\nImage(url=item2020.assets['rendered_preview'].href, width=400)\n\n\n\n\nHere, we have a raster showing biodiversity intactness. Darker green indicates higher intactness.\nLet’s dive a litter deeper by importing the rasters for 2017 and 2020. Down the line, I will compare changes between these two rasters to show BII changes from 2017 to 2020!\n\n# Access raster data from items\nbii_2020 = rioxr.open_rasterio(item2020.assets['data'].href)\nbii_2017 = rioxr.open_rasterio(item2017.assets['data'].href)\n\n# Let's look at the data for 2020\nbii_2020\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray (band: 1, y: 7992, x: 7992)&gt; Size: 255MB\n[63872064 values with dtype=float32]\nCoordinates:\n  * band         (band) int64 8B 1\n  * x            (x) float64 64kB -115.4 -115.4 -115.4 ... -108.2 -108.2 -108.2\n  * y            (y) float64 64kB 34.74 34.74 34.74 34.74 ... 27.57 27.57 27.57\n    spatial_ref  int64 8B 0\nAttributes:\n    AREA_OR_POINT:  Area\n    scale_factor:   1.0\n    add_offset:     0.0xarray.DataArrayband: 1y: 7992x: 7992...[63872064 values with dtype=float32]Coordinates: (4)band(band)int641array([1])x(x)float64-115.4 -115.4 ... -108.2 -108.2array([-115.385529, -115.384631, -115.383732, ..., -108.208888, -108.20799 ,\n       -108.207092])y(y)float6434.74 34.74 34.74 ... 27.57 27.57array([34.744201, 34.743302, 34.742404, ..., 27.56756 , 27.566661, 27.565763])spatial_ref()int640crs_wkt :GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],AUTHORITY[\"EPSG\",\"4326\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984grid_mapping_name :latitude_longitudespatial_ref :GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],AUTHORITY[\"EPSG\",\"4326\"]]GeoTransform :-115.38597824385106 0.0008983152841195215 0.0 34.74464974521749 0.0 -0.0008983152841195215array(0)Indexes: (3)bandPandasIndexPandasIndex(Index([1], dtype='int64', name='band'))xPandasIndexPandasIndex(Index([-115.38552908620899, -115.38463077092487, -115.38373245564075,\n       -115.38283414035664, -115.38193582507252,  -115.3810375097884,\n       -115.38013919450427, -115.37924087922015, -115.37834256393603,\n       -115.37744424865191,\n       ...\n       -108.21517648836696, -108.21427817308285, -108.21337985779873,\n       -108.21248154251461, -108.21158322723049, -108.21068491194637,\n       -108.20978659666225, -108.20888828137814, -108.20798996609402,\n        -108.2070916508099],\n      dtype='float64', name='x', length=7992))yPandasIndexPandasIndex(Index([ 34.74420058757543,  34.74330227229131,  34.74240395700719,\n       34.741505641723066,  34.74060732643895,  34.73970901115483,\n        34.73881069587071,  34.73791238058659, 34.737014065302475,\n        34.73611575001835,\n       ...\n        27.57384798973341, 27.572949674449287,  27.57205135916517,\n       27.571153043881047,  27.57025472859693,  27.56935641331281,\n        27.56845809802869,  27.56755978274457,  27.56666146746045,\n        27.56576315217633],\n      dtype='float64', name='y', length=7992))Attributes: (3)AREA_OR_POINT :Areascale_factor :1.0add_offset :0.0\n\n\nNotice that band is a dimension of length 1. We can go ahead and “squeeze” the raster to simplify it. I will do this for both my 2017 and my 2020 rasters:\n\n# Remove length 1 dimension (band)\nbii_2020 = bii_2020.squeeze().drop_vars('band')\nbii_2017 = bii_2017.squeeze().drop_vars('band')\n\nprint(\"Sizes of dimensions, bii_2020:\", dict(bii_2020.sizes))\nprint(\"Sizes of dimensions, bii_2017:\", dict(bii_2017.sizes))\n\nSizes of dimensions, bii_2020: {'y': 7992, 'x': 7992}\nSizes of dimensions, bii_2017: {'y': 7992, 'x': 7992}\n\n\nLastly, I want to know the CRS of this data.\n\n# Check raster CRS\nbii_2020.rio.crs\n\nCRS.from_epsg(4326)\n\n\nThe CRS of my rasters is EPSG:4326! I will keep this in mind as I explore my next geospatial object, the Phoenix Subdivision shapefile."
  },
  {
    "objectID": "blog-posts/BII-change/phoenix_bii_change.html#access-data-phoenix-subdivision-shapefile",
    "href": "blog-posts/BII-change/phoenix_bii_change.html#access-data-phoenix-subdivision-shapefile",
    "title": "Biodiversity Intactness Index change in Phoenix, AZ",
    "section": "Access Data: Phoenix Subdivision Shapefile",
    "text": "Access Data: Phoenix Subdivision Shapefile\n\n# Read in the shapefile\narizona = gpd.read_file('data/tl_2022_04_cousub.shp')"
  },
  {
    "objectID": "blog-posts/BII-change/phoenix_bii_change.html#phoenix-subdivision-shapefile-exploration",
    "href": "blog-posts/BII-change/phoenix_bii_change.html#phoenix-subdivision-shapefile-exploration",
    "title": "Biodiversity Intactness Index change in Phoenix, AZ",
    "section": "Phoenix Subdivision Shapefile exploration",
    "text": "Phoenix Subdivision Shapefile exploration\n\n# Look at the head of the data\narizona.head(3)\n\n\n\n\n\n\n\n\nSTATEFP\nCOUNTYFP\nCOUSUBFP\nCOUSUBNS\nGEOID\nNAME\nNAMELSAD\nLSAD\nCLASSFP\nMTFCC\nCNECTAFP\nNECTAFP\nNCTADVFP\nFUNCSTAT\nALAND\nAWATER\nINTPTLAT\nINTPTLON\ngeometry\n\n\n\n\n0\n04\n005\n91198\n01934931\n0400591198\nFlagstaff\nFlagstaff CCD\n22\nZ5\nG4040\nNone\nNone\nNone\nS\n12231052883\n44653332\n+35.1066114\n-111.3662497\nPOLYGON ((-112.13370 35.85596, -112.13368 35.8...\n\n\n1\n04\n005\n91838\n01934953\n0400591838\nKaibab Plateau\nKaibab Plateau CCD\n22\nZ5\nG4040\nNone\nNone\nNone\nS\n7228864534\n29327221\n+36.5991097\n-112.1368033\nPOLYGON ((-112.66039 36.53941, -112.66033 36.5...\n\n\n2\n04\n005\n91683\n01934950\n0400591683\nHualapai\nHualapai CCD\n22\nZ5\nG4040\nNone\nNone\nNone\nS\n2342313339\n3772690\n+35.9271665\n-113.1170408\nPOLYGON ((-113.35416 36.04097, -113.35416 36.0...\n\n\n\n\n\n\n\n\n# Preliminary plot\narizona.plot()\n\n\n\n\n\n\n\n\nThe shapefile contains data for all of Arizona. Let’s do a bit of processing to clean the column names and subset to Phoenix.\n\n# Convert column names to lowercase\narizona.columns = arizona.columns.str.lower()\n\n# Filter to Phoenix\nphoenix = arizona[arizona.name == \"Phoenix\"]\n\n# Preliminary plot\nphoenix.plot()\n\n\n\n\n\n\n\n\n\n# Check the CRS\nphoenix.crs\n\n&lt;Geographic 2D CRS: EPSG:4269&gt;\nName: NAD83\nAxis Info [ellipsoidal]:\n- Lat[north]: Geodetic latitude (degree)\n- Lon[east]: Geodetic longitude (degree)\nArea of Use:\n- name: North America - onshore and offshore: Canada - Alberta; British Columbia; Manitoba; New Brunswick; Newfoundland and Labrador; Northwest Territories; Nova Scotia; Nunavut; Ontario; Prince Edward Island; Quebec; Saskatchewan; Yukon. Puerto Rico. United States (USA) - Alabama; Alaska; Arizona; Arkansas; California; Colorado; Connecticut; Delaware; Florida; Georgia; Hawaii; Idaho; Illinois; Indiana; Iowa; Kansas; Kentucky; Louisiana; Maine; Maryland; Massachusetts; Michigan; Minnesota; Mississippi; Missouri; Montana; Nebraska; Nevada; New Hampshire; New Jersey; New Mexico; New York; North Carolina; North Dakota; Ohio; Oklahoma; Oregon; Pennsylvania; Rhode Island; South Carolina; South Dakota; Tennessee; Texas; Utah; Vermont; Virginia; Washington; West Virginia; Wisconsin; Wyoming. US Virgin Islands. British Virgin Islands.\n- bounds: (167.65, 14.92, -40.73, 86.45)\nDatum: North American Datum 1983\n- Ellipsoid: GRS 1980\n- Prime Meridian: Greenwich\n\n\nThe CRS of this GeoDataFrame is EPSG:4269. Note that this is different from the BII rasters, and I will need to match them before they can interact.\n\n# Match shapefile CRS to raster CRS\nphoenix = phoenix.to_crs(bii_2020.rio.crs)\nassert phoenix.crs == bii_2020.rio.crs"
  },
  {
    "objectID": "blog-posts/BII-change/phoenix_bii_change.html#map-the-phoenix-subdivision",
    "href": "blog-posts/BII-change/phoenix_bii_change.html#map-the-phoenix-subdivision",
    "title": "Biodiversity Intactness Index change in Phoenix, AZ",
    "section": "Map the Phoenix subdivision",
    "text": "Map the Phoenix subdivision\nTo contextualize the Phoenix subdivision within its broader geographic context, I will include a basemap from the contextily package. The simplest way to access contextily and get a background map to go with your geographic data is to use the add_basemap method. Because the method takes a matplotlib axis, it is easy to integrate contextily with any other package for geospatial data that plots to matplotlib, such as rasterio and geopandas.\nSetting the parameter source within the add_basemap method, I can choose the style of basemap. In this case, I am going to use CartoDB.Positron for its simplicity.\n\n# Initialize plot\nfig, ax = plt.subplots(figsize = (9, 9))\n\n# Remove axes for cleaner map\nax.axis('off')\n\n# Add Phoenix subdivision\nphoenix.plot(ax = ax, color = \"none\", edgecolor = \"firebrick\", linewidth = 2)\n\n# Add basemap\ncx.add_basemap(ax, crs = phoenix.crs, source = cx.providers.CartoDB.PositronNoLabels)\ncx.add_basemap(ax, crs = phoenix.crs, source = cx.providers.CartoDB.PositronOnlyLabels)   # To bring labels above boundary outline\n\n# Create legend for Phoenix border\nlegend_border = mpatches.Patch(color = \"#A83A34\", \n                               label = 'Phoenix subdivision border')\n\n# Plot legend\nax.legend(handles = [legend_border], \n          loc = 'upper left', \n          fontsize = 10, \n          facecolor = 'none', \n          edgecolor = 'none')\n\n# Plot title\nax.set_title('Map of study area: Phoenix subdivision border')\n\nplt.show()"
  },
  {
    "objectID": "blog-posts/BII-change/phoenix_bii_change.html#calculate-biodiversity-intactness-in-the-phoenix-subdivision",
    "href": "blog-posts/BII-change/phoenix_bii_change.html#calculate-biodiversity-intactness-in-the-phoenix-subdivision",
    "title": "Biodiversity Intactness Index change in Phoenix, AZ",
    "section": "Calculate biodiversity intactness in the Phoenix subdivision",
    "text": "Calculate biodiversity intactness in the Phoenix subdivision\nNext, I am interested in calculating the percentage of area of the Phoenix subdivision with a BII of at least 0.75 in both 2017 and 2020. I will use these to then find areas that lost BII over those 4 years.\nFirst, taking a look at how the raster is located with respect to the Phoenix subdivision:\n\n# Create GeoDataFrame from raster bounding box\nbii_bbox = gpd.GeoDataFrame(geometry = [box(*bii_2020.rio.bounds())],\n                             crs = bii_2020.rio.crs)\n\n# Plot raster boundary and Phoenix boundary\nfig, ax = plt.subplots()\nphoenix.plot(ax=ax, color='white', edgecolor ='black')\nbii_bbox.plot(ax=ax, alpha=0.3)  \n\nplt.show()\n\n\n\n\n\n\n\n\nI see that I need to crop the BII rasters to the extent of the Phoenix subdivision. Clipping can be a costly operation for such a big raster relative to a detailed geometry. So we will perform the clipping in two steps:\n\nClip the raster using the Phoenix subdivision bounding box using rio.clip_box() and then\nClip the simplified raster to the Phoenix subdivision using rio.clip().\n\n\n# Clip large raster to detailed geometry in two steps\nbii_2020_step1 = bii_2020.rio.clip_box(*phoenix.total_bounds)\nbii_2020_clip = bii_2020_step1.rio.clip(phoenix.geometry)\n\n\n# Take a look at the clipped raster\nbii_2020_clip.plot()\n\n\n\n\n\n\n\n\nNow, the BII raster for 2020 is clipped to the Phoenix subdivision! I will repeat the process for the 2017 raster, and then move on to the next step.\n\n# Clip large raster to detailed geometry in two steps\nbii_2017_step1 = bii_2017.rio.clip_box(*phoenix.total_bounds)\nbii_2017_clip = bii_2017_step1.rio.clip(phoenix.geometry)\n\nNext, I want to select areas in each raster that have a BII of at least 0.75.\n\n# Create a new object where if BII &gt;= 0.75, the new value = True, and if BII &lt; 0.75, the new value = False\nbii_2017_intact = bii_2017_clip &gt;= 0.75\nbii_2017_intact.plot()\n\n\n\n\n\n\n\n\n\n# Repeat for 2020\nbii_2020_intact = bii_2020_clip &gt;= 0.75\nbii_2020_intact.plot()\n\n\n\n\n\n\n\n\nLastly, I can calculate the percentage of area in the Phoenix subdivision that has a BII of at least 0.75. To do so, I will calculate the total area in the subdivision and then divide the area where BII &gt;= 0.75 by the total subdivision area. For ease of calculation, I will be using number of cells in the rasters to represent area.\nFirst, I use np.unique() to get the number of pixels that were &lt; 0.75 and &gt;= 0.75 in the cropped rasters for 2017 and 2020. By setting the parameter return_counts = True, I can see both the unique values and their counts.\n\n# Find the total count of values that are &lt; 0.75 and  &gt;= 0.75 for 2017\nvalues_2017, counts_2017 = np.unique(bii_2017_intact, return_counts=True)\n\n# Create a data frame with the pixel counts for 2017\npix_counts_2017 = pd.DataFrame({\"above_threshold\" : values_2017,\n                                \"number_of_pix\" : counts_2017})\n\n# Find the total count of values that are &lt; 0.75 and  &gt;= 0.75 for 2020\nvalues_2020, counts_2020 = np.unique(bii_2020_intact, return_counts=True)\n\n# Create a data frame with the pixel counts for 2020\npix_counts_2020 = pd.DataFrame({\"above_threshold\" : values_2020,\n                                \"number_of_pix\" : counts_2020})\n\n# Look at the 2017 data frame\npix_counts_2017\n\n\n\n\n\n\n\n\nabove_threshold\nnumber_of_pix\n\n\n\n\n0\nFalse\n553037\n\n\n1\nTrue\n24133\n\n\n\n\n\n\n\n\n# Look at the 2020 data frame\npix_counts_2020\n\n\n\n\n\n\n\n\nabove_threshold\nnumber_of_pix\n\n\n\n\n0\nFalse\n555184\n\n\n1\nTrue\n21986\n\n\n\n\n\n\n\nNext, I want to calculate the total number of pixels within the Phoenix subdivision. I use the same process as above to find the total area of the Phoenix subdivision using the 2020 clipped BII raster.\n\n# Find areas where values in the bii_2020_clip raster are above 0 , representing all the pixels within the Phoenix subdivision as True\ntotal_area = bii_2020_clip &gt; 0\n\n# Find the count of pixels where the above returned true, representing the total number of pixels within Phoenix\nvalues, counts = np.unique(total_area, return_counts=True)\n\n# Place the counts and values in a data frame\ntotal_area = pd.DataFrame({\"above_zero\" : values,\n                           \"number_pixels\" : counts})\n\ntotal_area\n\n\n\n\n\n\n\n\nabove_zero\nnumber_pixels\n\n\n\n\n0\nFalse\n238476\n\n\n1\nTrue\n338694\n\n\n\n\n\n\n\n\n# Access the value contianing the number of pixels within the Phoenix subdivision and save into a variable\ntotal_area = total_area.iloc[1,1]\ntotal_area\n\n338694\n\n\nNow, I can divide the number of pixels that are above the 0.75 threshold by the total number of pixels for 2017 and 2020 to find the percentage of area in the Phoenix subdivision that has a BII of at least 0.75.\n\n# Calculate the percentage of area in Phoenix that has a BII of &gt;= 0.75 in 2017 and 2020\npercent_intact_2017 = (pix_counts_2017.iloc[1, 1] / total_area) * 100\npercent_intact_2020 = (pix_counts_2020.iloc[1, 1] / total_area) * 100\n\nprint(\"The percentage of area for 2017 is: \",  round(percent_intact_2017,2), \"%\")\nprint(\"The percentage of area for 2020 is: \",  round(percent_intact_2020, 2), \"%\")\nprint(\"The percentage of area lost from 2017 to 2020 is: \", round(percent_intact_2017 - percent_intact_2020, 2), \"%\")\n\nThe percentage of area for 2017 is:  7.13 %\nThe percentage of area for 2020 is:  6.49 %\nThe percentage of area lost from 2017 to 2020 is:  0.63 %"
  },
  {
    "objectID": "blog-posts/BII-change/phoenix_bii_change.html#visualize-the-change-in-biodiversity-intactness-from-2017-to-2020",
    "href": "blog-posts/BII-change/phoenix_bii_change.html#visualize-the-change-in-biodiversity-intactness-from-2017-to-2020",
    "title": "Biodiversity Intactness Index change in Phoenix, AZ",
    "section": "Visualize the change in biodiversity intactness from 2017 to 2020",
    "text": "Visualize the change in biodiversity intactness from 2017 to 2020\nNow, I want to create a visualization showing the area with BII &gt;= 0.75 in 2017 that was lost by 2020. I will need to create a raster that contains a value of 1 where BII was &gt;= 0.75 in 2017 but not in 2020.\n\n# Change the values in my BII rasters from True/False to 1 and 0\nbii_2017_int = bii_2017_intact.astype('int')\nbii_2020_int = bii_2020_intact.astype('int')\nnp.unique(bii_2017_int)\n\narray([0, 1])\n\n\nWhen I subtract the 2020 BII raster from the 2017 BII raster, I then have a new raster with a value of 1 in areas that had BII &gt;= 0.75 in 2017 but not in 2020.\n\n# Create raster with BII change from 2017 to 2020\nbii_change = bii_2017_int - bii_2020_int\nnp.unique(bii_change)\n\narray([-1,  0,  1])\n\n\nNotice that we have 3 unique values, -1, 0, and 1. To see only areas that lost BII, I want to select the cells where bii_change == 1\n\n# Select cells where BII was lost from 2017 to 2020\nbii_loss = bii_change.where(bii_change == 1)\nbii_loss.plot()\n\n\n\n\n\n\n\n\nNow, I am ready to piece things together:\n\n# Initialize figure\nfig, ax = plt.subplots(figsize = (7, 6))\n\n# Remove axes for cleaner plot\nax.axis('off')\n\n# Add 2020 BII raster\nbii_2020_clip.plot(ax = ax, \n                   cmap = 'Greens',\n                   cbar_kwargs = {\"location\": \"bottom\",\n                                  \"label\": \"BII for 2020\",\n                                  \"shrink\" : 0.75})\n\n# Add BII loss\nbii_loss.plot(ax = ax,\n              cmap = 'brg',\n              add_colorbar = False)\n\n# Create legend for BII loss\nlegend_loss = mpatches.Patch(color = \"#E93323\", label = 'Area with BIl ≥ 0.75 lost from 2017 to 2020')\n\n# Plot legend\nax.legend(handles = [legend_loss], \n          loc = 'lower center',\n          bbox_to_anchor=(0.5, -0.22), \n          fontsize = 8, \n          facecolor = 'none', \n          edgecolor = 'none')\n\n# Add Phoenix boundary\nphoenix.plot(ax = ax,\n             color = \"none\",\n             edgecolor = \"black\",\n             linewidth = 1)\n\n# Add plot title\nax.set_title(\"Biodiversity Intactness Index (BII) \\n Phoenix subdivision\", weight = 'bold', fontsize = '10')\n\nplt.show()\n\n\n\n\n\n\n\n\n\nThis figure shows the Biodiversity Intactness Index (BII) change in the Phoenix subdivision from 2017 to 2020. In that time, 0.63% of the area with BII over 0.75 was lost, shown in red on the map."
  },
  {
    "objectID": "DELETELATER/practice.html",
    "href": "DELETELATER/practice.html",
    "title": "Here is my level one header",
    "section": "",
    "text": "Here is my level one header\nHere is my first paragraph\nHere is my second paragraph, where you can read more about MEDS.\nThis is very important text!"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "marina kochuten",
    "section": "",
    "text": "hi!\nI’m Marina. Currently, I am a Masters student in Environmental Data Science at UCSB’s Bren School of Environmental Science & Resource Management. As an emerging data scientist, I am constantly curious, creative, and eager to apply my newly developed skills to environmental problem solving. Outside of my work, you can find me cooking a fresh vegetarian meal, enjoying all things outdoors, and hanging with my pup Tahoma. Poke around my site to learn more about me and my work!\n\n\nEducationResearch ExperienceProfessional Experience\n\n\nMaster, Environmental Data Science (June 2025) | Bren School of Environmental Science & Management | University of California, Santa Barbara (UCSB)\nBachelor of Science, Environmental Science & Management (December 2019) | University of Washington (UW), Seattle WA | Study Abroad: Council on International Educational Exchange, Tropical Ecology & Conservation, Costa Rica (January – May 2019)\n\n\nMaster’s Capstone Project (2025) | Modeling the impacts of decarbonization on labor | Clients: 2035 Initative & UCSB Community Labor Project\nUndergraduate Capstone Research (2019) | Ectomycorrhizal fungi on carbon sequestration | Advisor: Johel Chaves-Campos, Ph.D.\nUndergraduate Research Assistant (2016-2017) | Hydro-Biogeochemistry Research Group, UW Seattle | Advisor: Rebecca B. Neumann, Ph.D.\n\n\nGraduate Teaching Assistant (2025) | UCSB Biology\nGraduate Teaching Assistant (2024) | UCSB Geography\nBartender (2021-2024) | Aslan Brewing Co. \nMiller Seed Vault Volunteer (2020-2022) | UW Botanic Gardens\nField Ecology Intern (2020) | UW Rare Plant Care & Conservation\nAssistant Director (Summers, 2018-2019) | EarthKeepers Nature Day Camp"
  },
  {
    "objectID": "blog-posts/thomas-blog/index.html",
    "href": "blog-posts/thomas-blog/index.html",
    "title": "Visualizing the 2017 Thomas Fire: A Python Analysis",
    "section": "",
    "text": "The Thomas Fire, which burned over 280,000 acres in Ventura and Santa Barbara counties in December 2017, was one of California’s largest wildfires at the time. It caused widespread ecological damage, displaced communities, and left lasting environmental impacts.\nUsing NASA’s Landsat data and California Fire Perimeter data, I create a map that visualizes the extent of the Thomas Fire. In conjunction, I use Air Quality Index (AQI) data from the Environmental Protection Agency (EPA) to visualize the AQI surrounding the fire. Together, these visualizations showcase the impact that the Thomas Fire had on the community.\n\n\n\n\n\n\n\n\n\n\n\n\nFor the full analysis, see my GitHub repository.\n\n\n\nRaster manipulation using rioxarray\nVector data manipulation using GeoPandas\nFalse color imagery to highlight wildfire impact\nData visualization with matplotlib\n\n\n\n\nLandsat: I use a simplified collection of bands (red, green, blue, near-infrared and shortwave infrared) from the Landsat Collection 2 Level-2 atmosperically corrected surface reflectance data, collected by the Landsat 8 satellite. The data was retrieved from the Microsoft Planetary Computer data catalogue and pre-processed to remove data outside land and coarsen the spatial resolution. This data is intended for visualization and educational purposes only.\n\nCitation: Microsoft Planetary Computer data catalogue (2024), Landsat Collection 2 Level-2 (simplified) [Data set] Available from: https://planetarycomputer.microsoft.com/dataset/landsat-c2-l2. Access date: November 18, 2024.\n\nFire perimeters: I use California Fire Perimeter data from the State of California’s Data Catalog to subset to the Thomas Fire boundary. In this analysis, I will be using the file that I created from the full dataset. The dataset is updated annually and includes fire perimeters dating back to 1878.\n\nCitation: State of California Data Catalog (2024), California Fire Perimeters (all) [Data set] Available from: https://catalog.data.gov/dataset/california-fire-perimeters-all-b3436. Access date: November 18, 2024.\n\nAir Quality Index (AQI): The EPA’s AirData tool has pre-generated files of data available for download. The files are updated twice per year: once in June to capture the complete data for the prior year and once in December to capture the data for the summer. AQI is calculated each day for each monitor for the Criteria Gases and PM10 and PM2.5. For this analysis, I use two files, one containing daily AQI data for 2017 and one for 2018.\n\nCitation: Environmental Protection Agency AirData (2024), Daily AQI by County [Data Set] Available from: https://www.epa.gov/outdoor-air-quality-data/download-daily-data. Access date: October 20, 2024."
  },
  {
    "objectID": "blog-posts/thomas-blog/index.html#about",
    "href": "blog-posts/thomas-blog/index.html#about",
    "title": "Visualizing the 2017 Thomas Fire: A Python Analysis",
    "section": "",
    "text": "The Thomas Fire, which burned over 280,000 acres in Ventura and Santa Barbara counties in December 2017, was one of California’s largest wildfires at the time. It caused widespread ecological damage, displaced communities, and left lasting environmental impacts.\nUsing NASA’s Landsat data and California Fire Perimeter data, I create a map that visualizes the extent of the Thomas Fire. In conjunction, I use Air Quality Index (AQI) data from the Environmental Protection Agency (EPA) to visualize the AQI surrounding the fire. Together, these visualizations showcase the impact that the Thomas Fire had on the community.\n\n\n\n\n\n\n\n\n\n\n\n\nFor the full analysis, see my GitHub repository.\n\n\n\nRaster manipulation using rioxarray\nVector data manipulation using GeoPandas\nFalse color imagery to highlight wildfire impact\nData visualization with matplotlib\n\n\n\n\nLandsat: I use a simplified collection of bands (red, green, blue, near-infrared and shortwave infrared) from the Landsat Collection 2 Level-2 atmosperically corrected surface reflectance data, collected by the Landsat 8 satellite. The data was retrieved from the Microsoft Planetary Computer data catalogue and pre-processed to remove data outside land and coarsen the spatial resolution. This data is intended for visualization and educational purposes only.\n\nCitation: Microsoft Planetary Computer data catalogue (2024), Landsat Collection 2 Level-2 (simplified) [Data set] Available from: https://planetarycomputer.microsoft.com/dataset/landsat-c2-l2. Access date: November 18, 2024.\n\nFire perimeters: I use California Fire Perimeter data from the State of California’s Data Catalog to subset to the Thomas Fire boundary. In this analysis, I will be using the file that I created from the full dataset. The dataset is updated annually and includes fire perimeters dating back to 1878.\n\nCitation: State of California Data Catalog (2024), California Fire Perimeters (all) [Data set] Available from: https://catalog.data.gov/dataset/california-fire-perimeters-all-b3436. Access date: November 18, 2024.\n\nAir Quality Index (AQI): The EPA’s AirData tool has pre-generated files of data available for download. The files are updated twice per year: once in June to capture the complete data for the prior year and once in December to capture the data for the summer. AQI is calculated each day for each monitor for the Criteria Gases and PM10 and PM2.5. For this analysis, I use two files, one containing daily AQI data for 2017 and one for 2018.\n\nCitation: Environmental Protection Agency AirData (2024), Daily AQI by County [Data Set] Available from: https://www.epa.gov/outdoor-air-quality-data/download-daily-data. Access date: October 20, 2024."
  },
  {
    "objectID": "blog-posts/thomas-blog/index.html#mapping-the-fire",
    "href": "blog-posts/thomas-blog/index.html#mapping-the-fire",
    "title": "Visualizing the 2017 Thomas Fire: A Python Analysis",
    "section": "Mapping the fire",
    "text": "Mapping the fire\n\nSetup\nTo start, I set up my analysis by loading all necessary libraries and data files.\n\n# Libraries for general analysis\nimport numpy as np\nimport pandas as pd\n\n# Libraries for geospatial data\nimport geopandas as gpd\nimport rioxarray as rioxr\n\n# Libraries for plotting\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as mpatches                # For creating custom legend\nfrom matplotlib_scalebar.scalebar import ScaleBar    # For adding scalebar \n\n# Import Landsat data\nlandsat = rioxr.open_rasterio('data/landsat8-2018-01-26-sb-simplified.nc')\n\n# Import California fire perimeters\nthomas_fire = gpd.read_file('data/thomas_fire_boundary.geojson')\n\n\n\nPrepare Data\nNow, I need to prepare the Landsat data. For processing the Landsat data, I will be primarily working with the rioxarray package. rioxarray is an extension of xarray that focuses on geospatial raster data. By loading the Landsat data in using rioxarray, I load the file as an xarray.Dataset, an object that includes both the raster data and the associated geospatial metadata, including CRS, affine transformations, and spatial coordinates.\n\n# Look at the Landsat raster\nlandsat\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt; Size: 25MB\nDimensions:      (band: 1, x: 870, y: 731)\nCoordinates:\n  * band         (band) int64 8B 1\n  * x            (x) float64 7kB 1.213e+05 1.216e+05 ... 3.557e+05 3.559e+05\n  * y            (y) float64 6kB 3.952e+06 3.952e+06 ... 3.756e+06 3.755e+06\n    spatial_ref  int64 8B 0\nData variables:\n    red          (band, y, x) float64 5MB ...\n    green        (band, y, x) float64 5MB ...\n    blue         (band, y, x) float64 5MB ...\n    nir08        (band, y, x) float64 5MB ...\n    swir22       (band, y, x) float64 5MB ...xarray.DatasetDimensions:band: 1x: 870y: 731Coordinates: (4)band(band)int641array([1])x(x)float641.213e+05 1.216e+05 ... 3.559e+05axis :Xcrs :EPSG:32611long_name :x coordinate of projectionresolution :30standard_name :projection_x_coordinateunits :metre_FillValue :nanarray([121305., 121575., 121845., ..., 355395., 355665., 355935.])y(y)float643.952e+06 3.952e+06 ... 3.755e+06axis :Ycrs :EPSG:32611long_name :y coordinate of projectionresolution :-30standard_name :projection_y_coordinateunits :metre_FillValue :nanarray([3952395., 3952125., 3951855., ..., 3755835., 3755565., 3755295.])spatial_ref()int640crs_wkt :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984projected_crs_name :WGS 84 / UTM zone 11Ngrid_mapping_name :transverse_mercatorlatitude_of_projection_origin :0.0longitude_of_central_meridian :-117.0false_easting :500000.0false_northing :0.0scale_factor_at_central_meridian :0.9996spatial_ref :PROJCS[\"WGS 84 / UTM zone 11N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",-117],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32611\"]]GeoTransform :121170.0 270.0 0.0 3952530.0 0.0 -270.0array(0)Data variables: (5)red(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]green(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]blue(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]nir08(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]swir22(band, y, x)float64...add_offset :0.0coordinates :timescale_factor :1.0_FillValue :0.0[635970 values with dtype=float64]Indexes: (3)bandPandasIndexPandasIndex(Index([1], dtype='int64', name='band'))xPandasIndexPandasIndex(Index([121305.0, 121575.0, 121845.0, 122115.0, 122385.0, 122655.0, 122925.0,\n       123195.0, 123465.0, 123735.0,\n       ...\n       353505.0, 353775.0, 354045.0, 354315.0, 354585.0, 354855.0, 355125.0,\n       355395.0, 355665.0, 355935.0],\n      dtype='float64', name='x', length=870))yPandasIndexPandasIndex(Index([3952395.0, 3952125.0, 3951855.0, 3951585.0, 3951315.0, 3951045.0,\n       3950775.0, 3950505.0, 3950235.0, 3949965.0,\n       ...\n       3757725.0, 3757455.0, 3757185.0, 3756915.0, 3756645.0, 3756375.0,\n       3756105.0, 3755835.0, 3755565.0, 3755295.0],\n      dtype='float64', name='y', length=731))Attributes: (0)\n\n\nTaking a look at the Landsat raster, I notice that we have a dimension named band that contains only one layer.\nUsing squeeze() and drop_vars(), I drop this unnecessary band dimension and it’s associated coordinates, resulting in a simpler, 2-dimensional raster. This will make plotting easier down the line.\n\n# Drop redundant band dimension\nlandsat = landsat.squeeze().drop_vars('band')\n\nNow, the Landsat raster is ready to be plotted.\nTo accentuate the Thomas fire scar, I overlay the Landsat raster with a polygon representing the perimeter of the Thomas Fire. In my full analysis, I prepared the California fire perimeter data by creating a new geospatial object containing only the Thomas Fire perimeter and saved it as thomas_fire_boundary.geojson. When manipulating the fire perimeter data, I used GeoPandas. Building off of the pandas.DataFrame, the core data structure in GeoPandas is the geopandas.GeoDataFrame, which can store geometry columns and perform spatial operations!\nI knew that the California fire perimeter data contains the columns YEAR_ and FIRE_NAME, which were useful for subsetting to the 2017 Thomas Fire. Since geopandas.GeoDataFrames are pandas.DataFrames at their core, I used basic dataframe subsetting to pull out the area of interest.\nFor the purposes of this post, I have only included my subset file. For the full analysis, see my GitHub repository.\n\n\nPlot the Landsat raster using false color and the Thomas Fire perimeter to highlight the extent of the burn\nRemote sensing instruments collect data from wavelengths both within and outside of the visible spectrum. False color imagery uses these non-visible wavelengths to reveal unique aspects that may not be visible otherwise. False color imagery has a wide range of applications, including acting as a useful tool for monitoring wildfire impacts. By assigning infrared bands to visible colors, these images highlight vegetation health, burn severity, and the extent of fire scars.\nIn this case, I use false color imagery to highlight the 2017 Thomas Fire’s burn scar. I use Landsat’s shortwave infrared as red, near infrared as green, and green bands as blue to visualize the burn. Newly burned land reflects strongly in SWIR bands, making the burn scar appear red in my map. The bright green shows vegetation, as it reflects near infrared light very strongly.\nTo do so, I select the shortwave infrared, near infrared, and red variables, convert to array, and plot. By setting the parameter robust = True in the imshow() method, I adjust the display of the image to handle color scaling appropriately by ignoring the outlier RBG values caused by clouds. It fixes contrast issues that cause images to appear bright white.\n\n\nShow code for the false color image\n# Before two spatial object can interact, I must match the CRSs\nthomas_fire = thomas_fire.to_crs(landsat.rio.crs)\nassert thomas_fire.crs == landsat.rio.crs\n\n# Create an object containing the aspect ratio for the landsat map\nratio = landsat.rio.width / landsat.rio.height\n\n# Initialize plot\nfig, ax = plt.subplots(figsize = (9, 9 * ratio))  # Update figure size and aspect\n\n# Remove axis for cleaner map\nax.axis('off')\n\n# Plot false color image highlighting the burn scar\nlandsat[['swir22', 'nir08', 'red']].to_array().plot.imshow(robust = True, ax = ax, zorder = 1)\n\n# Add custom legend items for false color image bands\nlegend_swir = mpatches.Patch(color = \"#FA957D\", label = 'Shortwave Infrared (SWIR) \\n - Burned Area')\nlegend_nir = mpatches.Patch(color = \"#62DF59\", label = 'Near Infrared \\n - Vegetation')\n\n# Add legend\nax.legend(handles = [legend_swir, legend_nir], loc = 'upper right', fontsize = 10)\n\n# Add Thomas Fire perimeter\nthomas_fire.plot(ax = ax, \n                 edgecolor = 'firebrick',\n                 color = 'none',\n                 linewidth = 2,\n                 zorder = 2,\n                 legend = True)\n\n# Add fire perimeter label\nax.text(x = 291870, y = 3831700,         # Position coordinates\n        s = \"Thomas Fire \\n Perimeter\",  # Label text\n        fontsize = 10, \n        weight = 'bold',\n        color = 'firebrick',\n        bbox = dict(facecolor = 'white', edgecolor = 'firebrick', alpha = 0.8, pad = 4))   # Box behind text for visibility\n\n# Add plot title\nax.set_title('2017 Thomas Fire (California) Burn Scar using False Color Imagery', fontsize = 16)\n\n# Add scale bar \nscalebar = ScaleBar(1, units='m', location='lower left', length_fraction=0.25, color='black')  \nax.add_artist(scalebar)\n\n# Display the plot\nplt.show()\n\n\n\n\n\n\n\n\n\nThis false color image uses the shortwave infrared and near infrared to easily visualize bare ground / burned areas (shown in red) and vegetation (shown in bright green)."
  },
  {
    "objectID": "blog-posts/thomas-blog/index.html#visualizing-aqi",
    "href": "blog-posts/thomas-blog/index.html#visualizing-aqi",
    "title": "Visualizing the 2017 Thomas Fire: A Python Analysis",
    "section": "Visualizing AQI",
    "text": "Visualizing AQI\nNow that I have a map highlighting the extent of the fire, I will make a supplimentary visualization showcasing the AQI surrounding the event. The U.S. Air Quality Index (AQI) is EPA’s tool for communicating about outdoor air quality and health. The AQI includes six categories, each corresponding to a range of index values. The higher the AQI value, the greater the level of air pollution and the greater the health concern. For example, an AQI value of 50 or below represents good air quality, while an AQI value over 300 represents hazardous air quality.\nFor this, I create a line plot showing both the daily AQI and the 5-day average in Santa Barbara County in 2017 and 2018.\n\nSetup\nFirst, I need to download the AQI data. I am accessing the data straight from its its ZIP file link, so I use the pd.read_csv function with the compression='zip' parameter added.\n\n# Load in county level AQI data from 2017 and 2018\naqi = pd.concat([pd.read_csv('https://aqs.epa.gov/aqsweb/airdata/daily_aqi_by_county_2017.zip',\n                             compression = 'zip'),\n                 pd.read_csv('https://aqs.epa.gov/aqsweb/airdata/daily_aqi_by_county_2018.zip',\n                            compression = 'zip')])\n\n\n\nPrepare data\nNext, I will tidy the data frame by converting the column names to lower snake case, subsetting to Santa Barbara county, and changing the data type of the date column to datetime.\n\n# Convert column names to lower snake case\naqi.columns = (aqi.columns\n                  .str.lower()\n                  .str.replace(' ','_'))\n\n# Make new data frame containing only AQI data for Santa Barbara County\naqi_sb = ((aqi[aqi['county_name'] == \"Santa Barbara\"])\n          .drop(columns = ['state_name', 'county_name', 'state_code', 'county_code'])\n         )\n\n# Convert date column to datetime object and set as the index\naqi_sb.date = pd.to_datetime(aqi_sb.date)\naqi_sb = aqi_sb.set_index('date')\n\n\n\nPlot daily AQI against the 5-day average AQI from 2017-2018\nRolling averages make it easy to identify short-term trends by smoothing out daily fluctuations. pandas makes calculating rolling averages very simple with the pandas.DataFrame.rolling() method. Since I already have a datetime column in my dataframe that includes day, I can pass the argument window = '5D' to .rolling() to specify a 5-day window, that I can then chain mean() to get the 5-day average!\n\n# Add new column containing a rolling 5-day AQI average\naqi_sb['five_day_average'] = aqi_sb['aqi'].rolling(window = '5D').mean()\n\nNow, I am ready to create the AQI plot.\n\n\nShow code for the AQI plot\n# Plot daily AQI against 5-day average ----\n\n# Initialize figure\nfig, ax = plt.subplots(figsize=(9,5))\n\n# Add daily and 5-day average AQI\naqi_sb.five_day_average.plot(ax=ax, color = 'firebrick', zorder = 3)\naqi_sb.aqi.plot(ax=ax, color = 'cornflowerblue', zorder = 2)\n\n# Add AQI labels for unhealthy levels\nax.axhspan(150, 151.5, facecolor = \"dimgrey\", alpha = 0.8)\nax.text(x = pd.to_datetime('2017-01-10'), y = 155, s = 'Unhealthy', color = 'dimgrey')\nax.axhspan(200, 202, facecolor = \"dimgrey\", alpha = 0.8)\nax.text(x = pd.to_datetime('2017-01-10'), y = 205, s = 'Very Unhealthy', color = 'dimgrey')\nax.axhspan(300, 301, facecolor = \"dimgrey\", alpha = 0.8)\nax.text(x = pd.to_datetime('2017-01-10'), y = 305, s = 'Hazardous', color = 'dimgrey')\n\n# Update axis labels and title\nplt.xlabel('Date')\nplt.ylabel('AQI')\nplt.title('AQI during the 2017 Thomas Fire in Santa Barbara County')\n\n# Add legend\nax.legend(labels = ['5-day average AQI', 'Daily AQI'])\n\n# Add label indicating the Thomas Fire\nax.axvline(x = pd.to_datetime('2017-12-01'), color = 'dimgrey', linestyle = 'dashed')\nax.text(x = pd.to_datetime('2017-08-25'), y = 255, s = 'Thomas Fire', color = 'dimgrey')\n\n# Update grid lines\nax.grid(axis = 'y', linewidth = 0.2)\n\nplt.show()"
  },
  {
    "objectID": "blog-posts/thomas-blog/index.html#conclusion",
    "href": "blog-posts/thomas-blog/index.html#conclusion",
    "title": "Visualizing the 2017 Thomas Fire: A Python Analysis",
    "section": "Conclusion",
    "text": "Conclusion\nFor this analysis, I bring my newly aquired skills working with tabular and spatial data in Python together to visualize the impact of the 2017 Thomas Fire on Santa Barbara county. Using false color imagery, I highlight the burn scar. Then, I use daily AQI data to create a plot that accompanies the burn scar map."
  },
  {
    "objectID": "blog-posts/aquaculture/index.html",
    "href": "blog-posts/aquaculture/index.html",
    "title": "Prioritizing Potential Aquaculture",
    "section": "",
    "text": "For this project, I determine which Exclusive Economic Zones (EEZ) on the West Coast of the US are best suited to developing marine aquaculture for several species of oysters and Dungeness crabs. Through my analysis, I use key concepts in geospatial analysis including:\n\ncombining vector/raster data\nresampling raster data\nmasking raster data\nmap algebra\nfunction building\n\nCheckout my GitHub repository here\nMarine aquaculture has the potential to play an important role in the global food supply as a more sustainable protein option than land-based meat production (Hall et al. 2011). Gentry et al. mapped the potential for marine aquaculture globally based on multiple constraints, including ship traffic, dissolved oxygen, and bottom depth. They found that global seafood demand could be met using less than 0.015% of the global ocean area (Gentry et al. 2017).\nSuitable locations are determined based on range of suitable sea surface temperature (SST) and depth values for each species. Suitable growing conditions are found on SeaLifeBase. Conditions for my species of interest are:\n\n\n\nsea surface temperature: 11-30°C\ndepth: 0-70 meters below sea level\n\n\n\n\n\nsea surface temperature: 3-19°C\ndepth: 0-360 meters below sea level\n\n\n\n\n\n\n\nI use average annual sea surface temperature (SST) from the years 2008 to 2012 to characterize the average sea surface temperature within the west coast regions. The data was originally generated from NOAA’s 5km Daily Global Satellite Sea Surface Temperature Anomaly v3.1.\nData files:\n\naverage_annual_sst_2008.tif\naverage_annual_sst_2009.tif\naverage_annual_sst_2010.tif\naverage_annual_sst_2011.tif\naverage_annual_sst_2012.tif\n\n\n\n\nTo characterize the depth of the ocean, I use the General Bathymetric Chart of the Oceans (GEBCO).\nData file: depth.tif\n\n\n\nI designate maritime boundaries using Exclusive Economic Zones off of the west coast of US from Marineregions.org.\nData file: wc_regions_clean.shp\n\n\n\n\nTo start, I set up my analysis by loading all necessary libraries and data files.\n\n\nShow the code for loading libraries\nrm(list = ls())  # Clear working environment\n\n# Load libraries ----\nlibrary(sf)\nlibrary(terra)\nlibrary(tidyverse)\nlibrary(tmap)\nlibrary(here)\nlibrary(testthat)\nlibrary(spData)    # For US States basemap  \n\n\n\n\nShow the code for loading data\n# Read in data ----\n\n# Sea surface temp\nsst_2008 &lt;- rast(here(\"blog-posts\", \"aquaculture\", \"data\", \"average_annual_sst_2008.tif\"))\nsst_2009 &lt;- rast(here(\"blog-posts\", \"aquaculture\", \"data\", \"average_annual_sst_2009.tif\"))\nsst_2010 &lt;- rast(here(\"blog-posts\", \"aquaculture\", \"data\", \"average_annual_sst_2010.tif\"))\nsst_2011 &lt;- rast(here(\"blog-posts\", \"aquaculture\", \"data\", \"average_annual_sst_2011.tif\"))\nsst_2012 &lt;- rast(here(\"blog-posts\", \"aquaculture\", \"data\", \"average_annual_sst_2012.tif\"))\n\n# Bathymetry\ndepth &lt;- rast(here(\"blog-posts\", \"aquaculture\", \"data\", \"depth.tif\"))\n\n# Exclusive economic zones for maritime boundaries\nwc_regions &lt;- read_sf(here(\"blog-posts\", \"aquaculture\", \"data\", \"wc_regions_clean.shp\"))\n\n\n\n\n\nNext, I combine all sea surface temperature rasters into one raster stack and match the coordinate reference systems of all files. For this analysis, I use EPSG:4326.\n\n\nShow the code for preparing data\n# Combine SST rasters into a stack ----\nsst_all &lt;- c(sst_2008,\n             sst_2009,\n             sst_2010,\n             sst_2011,\n             sst_2012)\n\n# Match CRSs ----\n\n# Regions\nwc_regions &lt;- st_transform(wc_regions, crs = \"EPSG:4326\")\n\n# Depth\ndepth &lt;- depth |&gt;\n  project(\"EPSG:4326\")\n\n# SST\nsst_all &lt;- sst_all|&gt;\n  project(\"EPSG:4326\")\n\n# Check that CRS match\ntest_that(\"All CRSs match\", \n          {expect_true(st_crs(wc_regions) == st_crs(depth) & st_crs(wc_regions) == st_crs(sst_all))\n})\n\n\nNow, I can process the SST and depth data so that they can be combined. To do this, I create a single raster containing mean SST in Celsius. Then, I match the extent and the resolution of the SST and depth rasters.\n\n\nShow the code for data processing\n# Create raster with mean SST from 2008-2012 ----\nsst_mean &lt;- mean(sst_all, na.rm = TRUE)  # Remove NA values\n\n# Convert mean SST from Kelvin to Celsius ----\nsst_mean &lt;- sst_mean - 273.15\n\n# Crop depth to match the extent of mean SST ----\next(depth) &lt;- ext(sst_mean)\n\n# Resample depth data to match the resolution of the SST data using the nearest neighbor approach ----\ndepth &lt;- resample(depth, sst_mean, method = \"near\")\n\n# Stack depth and mean SST to check that resolution, extent, and CRS match\nc(sst_mean,\n  depth)\n\n\n\n\n\nUltimately, I want to create a function that has the following characteristics:\n\narguments:\n\nminimum and maximum sea surface temperature\nminimum and maximum depth\nspecies name\n\noutputs:\n\nmap of EEZ regions colored by amount of suitable area\n\n\nBefore I create the generalized function, I create a workflow for a single species.\nThe first step is to find locations that are suitable in terms of both SST and depth by reclassifying SST and depth data into locations that are suitable for oysters (assigning 1 to suitable values and 0 to unsuitable) and multiplying the two reclassified rasters together, resulting in a new raster containing a 1 only in cells that are suitable for oyster growth.\n\n\nShow the code for finding areas suitable for oysters\n# Reclassify SST and depth into locations that are suitable for oysters ----\n\n# Create reclassification matrix - sst oysters\nrcl_sst_oysters &lt;- matrix(c(-Inf, 11, 0,    # unsuitable\n                            11, 30, 1,      # suitable\n                            30, Inf, 0),    # unsuitable\n                            ncol = 3, byrow = TRUE)\n\n# Reclassify SST\nsst_oysters &lt;- classify(sst_mean, rcl = rcl_sst_oysters)\nplot(sst_oysters)\n\n# Create reclassification matrix - depth oysters\nrcl_depth_oysters &lt;- matrix(c(-Inf, -70, 0,   # unsuitable\n                              -70, 0, 1,      # suitable\n                              0, Inf, 0),     # unsuitable\n                              ncol = 3, byrow = TRUE)\n\n# Reclassify depth\ndepth_oysters &lt;- classify(depth, rcl = rcl_depth_oysters)\nplot(depth_oysters)\n\n# Find locations that satisfy both SST and depth conditions for oysters ----\n# Multiplication will only place 1 in areas that have 1 for both sst and depth\noysters_suitable &lt;- lapp(c(sst_oysters, depth_oysters), fun = function(sst, depth) sst * depth) \n\n# Set unsuitable areas as NA\noysters_suitable[oysters_suitable == 0] &lt;- NA\nplot(oysters_suitable)\n\n\nThe next step is to determine the total suitable area within each EEZ in order to rank zones by priority. To do so, I sum the areas of individual cells that are suitable for oyster growth over the EEZ regions using an EEZ raster and zonal algebra.\n\n\nShow the code for determining the most suitable EEZs\n# Mask suitable oysters with wc_regions to crop suitable cells to within EEZs ----\noysters_masked &lt;- mask(oysters_suitable, wc_regions)\nplot(oysters_masked)\n\n# Rasterize wc_regions for zonal operations ----\neez_rast &lt;- rasterize(wc_regions, oysters_masked, field = \"rgn_id\")\nplot(eez_rast)\n\n# Find area of each grid cell ----\ncell_size &lt;- cellSize(oysters_masked, unit = \"km\")\n\n# Find total number of cells within each EEZ ----\neez_oyster_area &lt;- zonal(cell_size * oysters_masked, eez_rast, fun = \"sum\", na.rm = TRUE) |&gt;\n  rename(\"suitable_area_km2\" = \"area\")\n\n# Join eez_oyster_area to wc_regions vector by rgn_id and tidy ----\neez_oyster_area_vect &lt;- left_join(wc_regions,\n                                  eez_oyster_area,\n                                  by = 'rgn_id')  |&gt;\n  select(c(\"rgn\", \"rgn_id\", \"area_km2\", \"suitable_area_km2\")) |&gt;\n  rename(\"total_area_km2\" = \"area_km2\") |&gt;    \n  arrange(desc(suitable_area_km2)) %&gt;% \n  mutate(rank = paste0(1:nrow(.), \": \", rgn)) |&gt;   # Assign rank 1-5 based on total suitable area\n  mutate(suitable_area_label = paste(\"Suitable area: \\n\", round(suitable_area_km2), \"km2\"))\n\n\n\n\n\nNow that I have the total area within each EEZ suitable for oyster aquaculture, I can show the priority EEZs with a map where the EEZ regions are colored by amount of suitable area.\n\n\nShow the map code\n# Create oyster map\ntm_shape(us_states, bbox = wc_regions) +   # basemap \n  tm_polygons(alpha = 0.5) +\n  tm_shape(eez_oyster_area_vect) +   # Ranked EEZs\n  tm_polygons(col = \"rank\",\n              palette = \"-Blues\",\n              title = \"EEZ Aquaculture Priority Rank \\n 1 (highest) - 5 (lowest)\") +\n  tm_text(\"rgn\", fontface = \"bold\", ymod = 0.5) +   # EEZ region annotation                               \n  tm_shape(eez_oyster_area_vect) +   # Add again so I can have two text annotations\n    tm_polygons(col = \"rank\",\n              palette = \"-Blues\",\n              alpha = 0,\n              legend.show = FALSE) +\n  tm_text(\"suitable_area_label\", size = 0.8, ymod = -0.9) +   # Suitable area annotation\n  tm_layout(main.title = \"Area of Oyster Habitat \\n per West Coast Exclusive Economic Zones (EEZ)\",\n            main.title.position = c(\"center\", \"top\"),\n            legend.outside = TRUE,\n            bg.color = \"grey100\",\n            fontfamily = \"Times\",\n            title.position = c('center', 'center')) +\n  tm_compass(position = (c(\"left\", \"bottom\"))) +\n  tm_scale_bar(position = (c(\"left\", \"bottom\")))\n\n\n\n\n\n\n\n\n\n\n\n\nWith a workflow for one species, I can now generalize to create a function that will prioritize EEZ regions for any species passed as an argument.\n\n\nShow the function code\nsuitable_eez_func &lt;- function(species, min_sst, max_sst, min_depth, max_depth){\n  \n  # Set custom warning messages ----\n  if((min_depth &lt; 0) | (max_depth &lt; 0)){\n    stop(print(\"min_depth and max_depth must be positive numbers\"))\n  }\n  \n  if(max_sst &gt;= 100){\n    warning(print(\"max_sst seems a bit high\"))\n  }\n  \n  if(min_sst &gt;= max_sst){\n    stop(print(\"min_sst cannot be greater than max_sst. check values\"))\n  }\n  \n  if(min_depth &gt;= max_depth){\n    stop(print(\"min_depth cannot be greater than max_depth. check values\"))\n  }\n \n  # Reclassify SST and depth into locations that are suitable for species ----\n  rcl_sst &lt;- matrix(c(-Inf, min_sst, 0,         # unsuitable\n                      min_sst, max_sst, 1,      # suitable\n                      max_sst, Inf, 0),         # unsuitable\n                    ncol = 3, byrow = TRUE)\n  \n  sst_reclass &lt;- classify(sst_mean, rcl = rcl_sst)\n  \n  rcl_depth &lt;- matrix(c(-Inf, -max_depth, 0,         # unsuitable\n                        -max_depth, min_depth, 1,    # suitable\n                        min_depth, Inf, 0),                  # unsuitable\n                      ncol = 3, byrow = TRUE)\n  \n  depth_reclass &lt;- classify(depth, rcl = rcl_depth)\n  \n  # Find locations that satisfy both SST and depth conditions for species ----\n  suitable &lt;- lapp(c(sst_reclass, depth_reclass), fun = function(sst, depth) sst * depth) \n  \n  suitable[suitable == 0] &lt;- NA\n  \n  # Mask suitable with wc_regions to crop suitable cells to within EEZs ----\n  masked &lt;- mask(suitable, wc_regions)\n  \n  # Rasterize wc_regions for zonal operations ----\n  eez_rast &lt;- rasterize(wc_regions, masked, field = \"rgn_id\")\n  \n  # Find area of each grid cell ----\n  cell_size &lt;- cellSize(masked, unit = \"km\")\n  \n  # Find total number of cells within each EEZ ----\n  eez_area &lt;- zonal(cell_size * masked, eez_rast, fun = \"sum\", na.rm = TRUE) |&gt;\n    rename(\"suitable_area_km2\" = \"area\")\n  \n  # Join eez_area to wc_regions vector by rgn_id and tidy\n  eez_area_vect &lt;- left_join(wc_regions, eez_area, by = 'rgn_id')  |&gt;\n    select(c(\"rgn\", \"rgn_id\", \"area_km2\", \"suitable_area_km2\")) |&gt;\n    rename(\"total_area_km2\" = \"area_km2\") |&gt;\n    arrange(desc(suitable_area_km2)) %&gt;% \n    mutate(rank = paste0(1:5, \": \", rgn)) |&gt;\n    mutate(suitable_area_label = paste(\"Suitable area: \\n\", round(suitable_area_km2), \"km2\"))\n  \n  # Create map ----\n  tm_shape(us_states, bbox = wc_regions) +   # basemap \n    tm_polygons(alpha = 0.5) +\n    tm_shape(eez_area_vect) +   # Ranked EEZs\n    tm_polygons(col = \"rank\",\n                palette = \"-Blues\",\n                title = \"EEZ Aquaculture Priority Rank \\n 1 (highest) - 5 (lowest)\") +\n    tm_text(\"rgn\", fontface = \"bold\", ymod = 0.5) +   # EEZ region annotation                         \n    tm_shape(eez_area_vect) +   # Add again so I can have two text annotations\n    tm_polygons(col = \"rank\",\n                palette = \"-Blues\",\n                alpha = 0,\n                legend.show = FALSE) +\n    tm_text(\"suitable_area_label\", size = 0.8, ymod = -0.7) +   # Suitable area annotation\n    tm_layout(main.title = paste(\"Area of\", species, \"Habitat \\n per West Coast Exclusive Economic Zones (EEZ)\"),\n              main.title.position = c(\"center\", \"top\"),\n              legend.outside = TRUE,\n              bg.color = \"grey100\",\n              fontfamily = \"Times\",\n              title.position = c('center', 'center')) +\n    tm_compass(position = (c(\"left\", \"bottom\"))) +\n    tm_scale_bar(position = (c(\"left\", \"bottom\")))\n}\n\n\nTo use my function, suitable_eez_func(), provide the arguments:\n\nspecies = a character string containing the name of the species of interest\nmin_sst = a numeric value of the species minimum sea surface temperature (in Celsius)\nmax_sst = a numeric value of the species maximum sea surface temperature (in Celsius)\nmin_depth = a numeric value of the species minimum depth (in meters)\nmax_depth = a numeric value of the species maximum depth (in meters)\n\n\n\n\nUsing my function, I find EEZs to prioritize for aquaculture of Dungeness crabs:\n\n# Prioritize EEZs for growing Dungeness crabs ----\nsuitable_eez_func(species = \"Dungeness Crab\", \n                  min_sst =  3, \n                  max_sst =  19,\n                  min_depth = 0,\n                  max_depth = 360)\n\n\n\n\n\n\n\n\n\n\n\nWashington (Region ID: 5) is best suited for oysters with a total suitable area of 4483 square kilometers. For Dungeness crabs, Oregon (Region ID: 1) is best suited with a total suitable area of 18,497 square kilometers.\n\n\n\nSuitable areas are an approximation over entire cells within the rasters. If the areas suitable for a particular species cuts through a cell, that entire cell is considered in the total area.\nOther conditions that may effect suitability for marine aquaculture other than sea surface temperature and depth are not considered in calculating total area suitable for each species.\nThe data I used to calculate sea surface temperature is from 2008-2012. With rising sea temperatures, it is very possible that the average sea surface temperature today is different than the one used in this analysis. It would be important to consider more recent SST data in further consideration of this analysis.\n\n\n\n\n\n\n\nSuitable Growing Conditions: Palomares, M.L.D. and D. Pauly. Editors. 2024. SeaLifeBase. World Wide Web electronic publication. www.sealifebase.org, version (08/2024). Accessed 2024-11-09\nSea Surface Temperature: NOAA Coral Reef Watch. 2018, updated daily. NOAA Coral Reef Watch Version 3.1 5km Daily Global Satellite Sea Surface Temperature Anomaly Product, 2008-2012. College Park, Maryland, USA: NOAA Coral Reef Watch. Data set accessed 2024-11-09 at https://coralreefwatch.noaa.gov/product/5km/index_5km_ssta.php.\nBathymetry: GEBCO Compilation Group (2024) GEBCO 2024 Grid (doi:10.5285/1c44ce99-0a0d-5f4f-e063-7086abc0ea0f). Data set accessed 2024-11-09 at https://www.gebco.net/data_and_products/gridded_bathymetry_data/#area\nExclusive Economic Zones: Marine Regions (2024) Flanders Marine Institute. Data set accessed 2024-11-09 at https://www.marineregions.org/eez.php.\n\n\n\nHall, S. J., Delaporte, A., Phillips, M. J., Beveridge, M. & O’Keefe, M. Blue Frontiers: Managing the Environmental Costs of Aquaculture (The WorldFish Center, Penang, Malaysia, 2011).\nGentry, R. R., Froehlich, H. E., Grimm, D., Kareiva, P., Parke, M., Rust, M., Gaines, S. D., & Halpern, B. S. Mapping the global potential for marine aquaculture. Nature Ecology & Evolution, 1, 1317-1324 (2017)."
  },
  {
    "objectID": "blog-posts/aquaculture/index.html#project-description",
    "href": "blog-posts/aquaculture/index.html#project-description",
    "title": "Prioritizing Potential Aquaculture",
    "section": "",
    "text": "For this project, I determine which Exclusive Economic Zones (EEZ) on the West Coast of the US are best suited to developing marine aquaculture for several species of oysters and Dungeness crabs. Through my analysis, I use key concepts in geospatial analysis including:\n\ncombining vector/raster data\nresampling raster data\nmasking raster data\nmap algebra\nfunction building\n\nCheckout my GitHub repository here\nMarine aquaculture has the potential to play an important role in the global food supply as a more sustainable protein option than land-based meat production (Hall et al. 2011). Gentry et al. mapped the potential for marine aquaculture globally based on multiple constraints, including ship traffic, dissolved oxygen, and bottom depth. They found that global seafood demand could be met using less than 0.015% of the global ocean area (Gentry et al. 2017).\nSuitable locations are determined based on range of suitable sea surface temperature (SST) and depth values for each species. Suitable growing conditions are found on SeaLifeBase. Conditions for my species of interest are:\n\n\n\nsea surface temperature: 11-30°C\ndepth: 0-70 meters below sea level\n\n\n\n\n\nsea surface temperature: 3-19°C\ndepth: 0-360 meters below sea level"
  },
  {
    "objectID": "blog-posts/aquaculture/index.html#data-details",
    "href": "blog-posts/aquaculture/index.html#data-details",
    "title": "Prioritizing Potential Aquaculture",
    "section": "",
    "text": "I use average annual sea surface temperature (SST) from the years 2008 to 2012 to characterize the average sea surface temperature within the west coast regions. The data was originally generated from NOAA’s 5km Daily Global Satellite Sea Surface Temperature Anomaly v3.1.\nData files:\n\naverage_annual_sst_2008.tif\naverage_annual_sst_2009.tif\naverage_annual_sst_2010.tif\naverage_annual_sst_2011.tif\naverage_annual_sst_2012.tif\n\n\n\n\nTo characterize the depth of the ocean, I use the General Bathymetric Chart of the Oceans (GEBCO).\nData file: depth.tif\n\n\n\nI designate maritime boundaries using Exclusive Economic Zones off of the west coast of US from Marineregions.org.\nData file: wc_regions_clean.shp"
  },
  {
    "objectID": "blog-posts/aquaculture/index.html#setup",
    "href": "blog-posts/aquaculture/index.html#setup",
    "title": "Prioritizing Potential Aquaculture",
    "section": "",
    "text": "To start, I set up my analysis by loading all necessary libraries and data files.\n\n\nShow the code for loading libraries\nrm(list = ls())  # Clear working environment\n\n# Load libraries ----\nlibrary(sf)\nlibrary(terra)\nlibrary(tidyverse)\nlibrary(tmap)\nlibrary(here)\nlibrary(testthat)\nlibrary(spData)    # For US States basemap  \n\n\n\n\nShow the code for loading data\n# Read in data ----\n\n# Sea surface temp\nsst_2008 &lt;- rast(here(\"blog-posts\", \"aquaculture\", \"data\", \"average_annual_sst_2008.tif\"))\nsst_2009 &lt;- rast(here(\"blog-posts\", \"aquaculture\", \"data\", \"average_annual_sst_2009.tif\"))\nsst_2010 &lt;- rast(here(\"blog-posts\", \"aquaculture\", \"data\", \"average_annual_sst_2010.tif\"))\nsst_2011 &lt;- rast(here(\"blog-posts\", \"aquaculture\", \"data\", \"average_annual_sst_2011.tif\"))\nsst_2012 &lt;- rast(here(\"blog-posts\", \"aquaculture\", \"data\", \"average_annual_sst_2012.tif\"))\n\n# Bathymetry\ndepth &lt;- rast(here(\"blog-posts\", \"aquaculture\", \"data\", \"depth.tif\"))\n\n# Exclusive economic zones for maritime boundaries\nwc_regions &lt;- read_sf(here(\"blog-posts\", \"aquaculture\", \"data\", \"wc_regions_clean.shp\"))"
  },
  {
    "objectID": "blog-posts/aquaculture/index.html#prepare-and-process-data",
    "href": "blog-posts/aquaculture/index.html#prepare-and-process-data",
    "title": "Prioritizing Potential Aquaculture",
    "section": "",
    "text": "Next, I combine all sea surface temperature rasters into one raster stack and match the coordinate reference systems of all files. For this analysis, I use EPSG:4326.\n\n\nShow the code for preparing data\n# Combine SST rasters into a stack ----\nsst_all &lt;- c(sst_2008,\n             sst_2009,\n             sst_2010,\n             sst_2011,\n             sst_2012)\n\n# Match CRSs ----\n\n# Regions\nwc_regions &lt;- st_transform(wc_regions, crs = \"EPSG:4326\")\n\n# Depth\ndepth &lt;- depth |&gt;\n  project(\"EPSG:4326\")\n\n# SST\nsst_all &lt;- sst_all|&gt;\n  project(\"EPSG:4326\")\n\n# Check that CRS match\ntest_that(\"All CRSs match\", \n          {expect_true(st_crs(wc_regions) == st_crs(depth) & st_crs(wc_regions) == st_crs(sst_all))\n})\n\n\nNow, I can process the SST and depth data so that they can be combined. To do this, I create a single raster containing mean SST in Celsius. Then, I match the extent and the resolution of the SST and depth rasters.\n\n\nShow the code for data processing\n# Create raster with mean SST from 2008-2012 ----\nsst_mean &lt;- mean(sst_all, na.rm = TRUE)  # Remove NA values\n\n# Convert mean SST from Kelvin to Celsius ----\nsst_mean &lt;- sst_mean - 273.15\n\n# Crop depth to match the extent of mean SST ----\next(depth) &lt;- ext(sst_mean)\n\n# Resample depth data to match the resolution of the SST data using the nearest neighbor approach ----\ndepth &lt;- resample(depth, sst_mean, method = \"near\")\n\n# Stack depth and mean SST to check that resolution, extent, and CRS match\nc(sst_mean,\n  depth)"
  },
  {
    "objectID": "blog-posts/aquaculture/index.html#build-analysis-to-find-suitable-locations-for-oyster-aquaculture",
    "href": "blog-posts/aquaculture/index.html#build-analysis-to-find-suitable-locations-for-oyster-aquaculture",
    "title": "Prioritizing Potential Aquaculture",
    "section": "",
    "text": "Ultimately, I want to create a function that has the following characteristics:\n\narguments:\n\nminimum and maximum sea surface temperature\nminimum and maximum depth\nspecies name\n\noutputs:\n\nmap of EEZ regions colored by amount of suitable area\n\n\nBefore I create the generalized function, I create a workflow for a single species.\nThe first step is to find locations that are suitable in terms of both SST and depth by reclassifying SST and depth data into locations that are suitable for oysters (assigning 1 to suitable values and 0 to unsuitable) and multiplying the two reclassified rasters together, resulting in a new raster containing a 1 only in cells that are suitable for oyster growth.\n\n\nShow the code for finding areas suitable for oysters\n# Reclassify SST and depth into locations that are suitable for oysters ----\n\n# Create reclassification matrix - sst oysters\nrcl_sst_oysters &lt;- matrix(c(-Inf, 11, 0,    # unsuitable\n                            11, 30, 1,      # suitable\n                            30, Inf, 0),    # unsuitable\n                            ncol = 3, byrow = TRUE)\n\n# Reclassify SST\nsst_oysters &lt;- classify(sst_mean, rcl = rcl_sst_oysters)\nplot(sst_oysters)\n\n# Create reclassification matrix - depth oysters\nrcl_depth_oysters &lt;- matrix(c(-Inf, -70, 0,   # unsuitable\n                              -70, 0, 1,      # suitable\n                              0, Inf, 0),     # unsuitable\n                              ncol = 3, byrow = TRUE)\n\n# Reclassify depth\ndepth_oysters &lt;- classify(depth, rcl = rcl_depth_oysters)\nplot(depth_oysters)\n\n# Find locations that satisfy both SST and depth conditions for oysters ----\n# Multiplication will only place 1 in areas that have 1 for both sst and depth\noysters_suitable &lt;- lapp(c(sst_oysters, depth_oysters), fun = function(sst, depth) sst * depth) \n\n# Set unsuitable areas as NA\noysters_suitable[oysters_suitable == 0] &lt;- NA\nplot(oysters_suitable)\n\n\nThe next step is to determine the total suitable area within each EEZ in order to rank zones by priority. To do so, I sum the areas of individual cells that are suitable for oyster growth over the EEZ regions using an EEZ raster and zonal algebra.\n\n\nShow the code for determining the most suitable EEZs\n# Mask suitable oysters with wc_regions to crop suitable cells to within EEZs ----\noysters_masked &lt;- mask(oysters_suitable, wc_regions)\nplot(oysters_masked)\n\n# Rasterize wc_regions for zonal operations ----\neez_rast &lt;- rasterize(wc_regions, oysters_masked, field = \"rgn_id\")\nplot(eez_rast)\n\n# Find area of each grid cell ----\ncell_size &lt;- cellSize(oysters_masked, unit = \"km\")\n\n# Find total number of cells within each EEZ ----\neez_oyster_area &lt;- zonal(cell_size * oysters_masked, eez_rast, fun = \"sum\", na.rm = TRUE) |&gt;\n  rename(\"suitable_area_km2\" = \"area\")\n\n# Join eez_oyster_area to wc_regions vector by rgn_id and tidy ----\neez_oyster_area_vect &lt;- left_join(wc_regions,\n                                  eez_oyster_area,\n                                  by = 'rgn_id')  |&gt;\n  select(c(\"rgn\", \"rgn_id\", \"area_km2\", \"suitable_area_km2\")) |&gt;\n  rename(\"total_area_km2\" = \"area_km2\") |&gt;    \n  arrange(desc(suitable_area_km2)) %&gt;% \n  mutate(rank = paste0(1:nrow(.), \": \", rgn)) |&gt;   # Assign rank 1-5 based on total suitable area\n  mutate(suitable_area_label = paste(\"Suitable area: \\n\", round(suitable_area_km2), \"km2\"))"
  },
  {
    "objectID": "blog-posts/aquaculture/index.html#create-map-of-eezs-colored-by-area-of-oyster-suitability",
    "href": "blog-posts/aquaculture/index.html#create-map-of-eezs-colored-by-area-of-oyster-suitability",
    "title": "Prioritizing Potential Aquaculture",
    "section": "",
    "text": "Now that I have the total area within each EEZ suitable for oyster aquaculture, I can show the priority EEZs with a map where the EEZ regions are colored by amount of suitable area.\n\n\nShow the map code\n# Create oyster map\ntm_shape(us_states, bbox = wc_regions) +   # basemap \n  tm_polygons(alpha = 0.5) +\n  tm_shape(eez_oyster_area_vect) +   # Ranked EEZs\n  tm_polygons(col = \"rank\",\n              palette = \"-Blues\",\n              title = \"EEZ Aquaculture Priority Rank \\n 1 (highest) - 5 (lowest)\") +\n  tm_text(\"rgn\", fontface = \"bold\", ymod = 0.5) +   # EEZ region annotation                               \n  tm_shape(eez_oyster_area_vect) +   # Add again so I can have two text annotations\n    tm_polygons(col = \"rank\",\n              palette = \"-Blues\",\n              alpha = 0,\n              legend.show = FALSE) +\n  tm_text(\"suitable_area_label\", size = 0.8, ymod = -0.9) +   # Suitable area annotation\n  tm_layout(main.title = \"Area of Oyster Habitat \\n per West Coast Exclusive Economic Zones (EEZ)\",\n            main.title.position = c(\"center\", \"top\"),\n            legend.outside = TRUE,\n            bg.color = \"grey100\",\n            fontfamily = \"Times\",\n            title.position = c('center', 'center')) +\n  tm_compass(position = (c(\"left\", \"bottom\"))) +\n  tm_scale_bar(position = (c(\"left\", \"bottom\")))"
  },
  {
    "objectID": "blog-posts/aquaculture/index.html#generalize-workflow-into-a-function",
    "href": "blog-posts/aquaculture/index.html#generalize-workflow-into-a-function",
    "title": "Prioritizing Potential Aquaculture",
    "section": "",
    "text": "With a workflow for one species, I can now generalize to create a function that will prioritize EEZ regions for any species passed as an argument.\n\n\nShow the function code\nsuitable_eez_func &lt;- function(species, min_sst, max_sst, min_depth, max_depth){\n  \n  # Set custom warning messages ----\n  if((min_depth &lt; 0) | (max_depth &lt; 0)){\n    stop(print(\"min_depth and max_depth must be positive numbers\"))\n  }\n  \n  if(max_sst &gt;= 100){\n    warning(print(\"max_sst seems a bit high\"))\n  }\n  \n  if(min_sst &gt;= max_sst){\n    stop(print(\"min_sst cannot be greater than max_sst. check values\"))\n  }\n  \n  if(min_depth &gt;= max_depth){\n    stop(print(\"min_depth cannot be greater than max_depth. check values\"))\n  }\n \n  # Reclassify SST and depth into locations that are suitable for species ----\n  rcl_sst &lt;- matrix(c(-Inf, min_sst, 0,         # unsuitable\n                      min_sst, max_sst, 1,      # suitable\n                      max_sst, Inf, 0),         # unsuitable\n                    ncol = 3, byrow = TRUE)\n  \n  sst_reclass &lt;- classify(sst_mean, rcl = rcl_sst)\n  \n  rcl_depth &lt;- matrix(c(-Inf, -max_depth, 0,         # unsuitable\n                        -max_depth, min_depth, 1,    # suitable\n                        min_depth, Inf, 0),                  # unsuitable\n                      ncol = 3, byrow = TRUE)\n  \n  depth_reclass &lt;- classify(depth, rcl = rcl_depth)\n  \n  # Find locations that satisfy both SST and depth conditions for species ----\n  suitable &lt;- lapp(c(sst_reclass, depth_reclass), fun = function(sst, depth) sst * depth) \n  \n  suitable[suitable == 0] &lt;- NA\n  \n  # Mask suitable with wc_regions to crop suitable cells to within EEZs ----\n  masked &lt;- mask(suitable, wc_regions)\n  \n  # Rasterize wc_regions for zonal operations ----\n  eez_rast &lt;- rasterize(wc_regions, masked, field = \"rgn_id\")\n  \n  # Find area of each grid cell ----\n  cell_size &lt;- cellSize(masked, unit = \"km\")\n  \n  # Find total number of cells within each EEZ ----\n  eez_area &lt;- zonal(cell_size * masked, eez_rast, fun = \"sum\", na.rm = TRUE) |&gt;\n    rename(\"suitable_area_km2\" = \"area\")\n  \n  # Join eez_area to wc_regions vector by rgn_id and tidy\n  eez_area_vect &lt;- left_join(wc_regions, eez_area, by = 'rgn_id')  |&gt;\n    select(c(\"rgn\", \"rgn_id\", \"area_km2\", \"suitable_area_km2\")) |&gt;\n    rename(\"total_area_km2\" = \"area_km2\") |&gt;\n    arrange(desc(suitable_area_km2)) %&gt;% \n    mutate(rank = paste0(1:5, \": \", rgn)) |&gt;\n    mutate(suitable_area_label = paste(\"Suitable area: \\n\", round(suitable_area_km2), \"km2\"))\n  \n  # Create map ----\n  tm_shape(us_states, bbox = wc_regions) +   # basemap \n    tm_polygons(alpha = 0.5) +\n    tm_shape(eez_area_vect) +   # Ranked EEZs\n    tm_polygons(col = \"rank\",\n                palette = \"-Blues\",\n                title = \"EEZ Aquaculture Priority Rank \\n 1 (highest) - 5 (lowest)\") +\n    tm_text(\"rgn\", fontface = \"bold\", ymod = 0.5) +   # EEZ region annotation                         \n    tm_shape(eez_area_vect) +   # Add again so I can have two text annotations\n    tm_polygons(col = \"rank\",\n                palette = \"-Blues\",\n                alpha = 0,\n                legend.show = FALSE) +\n    tm_text(\"suitable_area_label\", size = 0.8, ymod = -0.7) +   # Suitable area annotation\n    tm_layout(main.title = paste(\"Area of\", species, \"Habitat \\n per West Coast Exclusive Economic Zones (EEZ)\"),\n              main.title.position = c(\"center\", \"top\"),\n              legend.outside = TRUE,\n              bg.color = \"grey100\",\n              fontfamily = \"Times\",\n              title.position = c('center', 'center')) +\n    tm_compass(position = (c(\"left\", \"bottom\"))) +\n    tm_scale_bar(position = (c(\"left\", \"bottom\")))\n}\n\n\nTo use my function, suitable_eez_func(), provide the arguments:\n\nspecies = a character string containing the name of the species of interest\nmin_sst = a numeric value of the species minimum sea surface temperature (in Celsius)\nmax_sst = a numeric value of the species maximum sea surface temperature (in Celsius)\nmin_depth = a numeric value of the species minimum depth (in meters)\nmax_depth = a numeric value of the species maximum depth (in meters)"
  },
  {
    "objectID": "blog-posts/aquaculture/index.html#find-suitable-eezs-for-dungeness-crabs",
    "href": "blog-posts/aquaculture/index.html#find-suitable-eezs-for-dungeness-crabs",
    "title": "Prioritizing Potential Aquaculture",
    "section": "",
    "text": "Using my function, I find EEZs to prioritize for aquaculture of Dungeness crabs:\n\n# Prioritize EEZs for growing Dungeness crabs ----\nsuitable_eez_func(species = \"Dungeness Crab\", \n                  min_sst =  3, \n                  max_sst =  19,\n                  min_depth = 0,\n                  max_depth = 360)"
  },
  {
    "objectID": "blog-posts/aquaculture/index.html#interpretation-of-results",
    "href": "blog-posts/aquaculture/index.html#interpretation-of-results",
    "title": "Prioritizing Potential Aquaculture",
    "section": "",
    "text": "Washington (Region ID: 5) is best suited for oysters with a total suitable area of 4483 square kilometers. For Dungeness crabs, Oregon (Region ID: 1) is best suited with a total suitable area of 18,497 square kilometers.\n\n\n\nSuitable areas are an approximation over entire cells within the rasters. If the areas suitable for a particular species cuts through a cell, that entire cell is considered in the total area.\nOther conditions that may effect suitability for marine aquaculture other than sea surface temperature and depth are not considered in calculating total area suitable for each species.\nThe data I used to calculate sea surface temperature is from 2008-2012. With rising sea temperatures, it is very possible that the average sea surface temperature today is different than the one used in this analysis. It would be important to consider more recent SST data in further consideration of this analysis."
  },
  {
    "objectID": "blog-posts/aquaculture/index.html#citations",
    "href": "blog-posts/aquaculture/index.html#citations",
    "title": "Prioritizing Potential Aquaculture",
    "section": "",
    "text": "Suitable Growing Conditions: Palomares, M.L.D. and D. Pauly. Editors. 2024. SeaLifeBase. World Wide Web electronic publication. www.sealifebase.org, version (08/2024). Accessed 2024-11-09\nSea Surface Temperature: NOAA Coral Reef Watch. 2018, updated daily. NOAA Coral Reef Watch Version 3.1 5km Daily Global Satellite Sea Surface Temperature Anomaly Product, 2008-2012. College Park, Maryland, USA: NOAA Coral Reef Watch. Data set accessed 2024-11-09 at https://coralreefwatch.noaa.gov/product/5km/index_5km_ssta.php.\nBathymetry: GEBCO Compilation Group (2024) GEBCO 2024 Grid (doi:10.5285/1c44ce99-0a0d-5f4f-e063-7086abc0ea0f). Data set accessed 2024-11-09 at https://www.gebco.net/data_and_products/gridded_bathymetry_data/#area\nExclusive Economic Zones: Marine Regions (2024) Flanders Marine Institute. Data set accessed 2024-11-09 at https://www.marineregions.org/eez.php.\n\n\n\nHall, S. J., Delaporte, A., Phillips, M. J., Beveridge, M. & O’Keefe, M. Blue Frontiers: Managing the Environmental Costs of Aquaculture (The WorldFish Center, Penang, Malaysia, 2011).\nGentry, R. R., Froehlich, H. E., Grimm, D., Kareiva, P., Parke, M., Rust, M., Gaines, S. D., & Halpern, B. S. Mapping the global potential for marine aquaculture. Nature Ecology & Evolution, 1, 1317-1324 (2017)."
  },
  {
    "objectID": "posts.html",
    "href": "posts.html",
    "title": "my work",
    "section": "",
    "text": "Un-sung Pollination Hero\n\n\n\n\n\n\nMEDS\n\n\nData-viz\n\n\n\nIt’s a wasp! It’s a bee! No, it’s a… hoverfly?\n\n\n\n\n\nMar 11, 2025\n\n\nMarina Kochuten\n\n\n\n\n\n\n\n\n\n\n\n\nBiodiversity Intactness Index change in Phoenix, AZ\n\n\n\n\n\n\nJupyter\n\n\nMEDS\n\n\nPython\n\n\n\nExamining changes in BII in the Phoenix county subdivision area between 2017 and 2020, shedding light on how urban growth affects biodiversity over time.\n\n\n\n\n\nDec 12, 2024\n\n\nMarina Kochuten\n\n\n\n\n\n\n\n\n\n\n\n\nVisualizing the 2017 Thomas Fire: A Python Analysis\n\n\n\n\n\n\nJupyter\n\n\nMEDS\n\n\nPython\n\n\n\nUsing AQI data and false color imagery to visualize the effects of the Thomas Fire on Santa Barbara county\n\n\n\n\n\nDec 12, 2024\n\n\nMarina Kochuten\n\n\n\n\n\n\n\n\n\n\n\n\nChinook Salmon Harvest\n\n\n\n\n\n\nQuarto\n\n\nMEDS\n\n\nStats\n\n\nRandomization\n\n\n\nExploring Chinook salmon harvest within commercial and subsistence fishing sectors in the Aleutian Islands\n\n\n\n\n\nDec 7, 2024\n\n\nMarina Kochuten\n\n\n\n\n\n\n\n\n\n\n\n\nPrioritizing Potential Aquaculture\n\n\n\n\n\n\nQuarto\n\n\nMEDS\n\n\nSpatial\n\n\n\nUsing key concepts in geospatial analysis to create a function that prioritizes maritime regions best suited for marine aquaculture\n\n\n\n\n\nNov 30, 2024\n\n\nMarina Kochuten\n\n\n\n\n\n\n\n\n\n\n\n\nLandcover Classification\n\n\n\n\n\n\nQuarto\n\n\nMEDS\n\n\nSupervised-learning\n\n\n\nUsing a decision tree classifier to create a land cover classification for southern Santa Barbara County\n\n\n\n\n\nFeb 24, 2022\n\n\nMarina Kochuten\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "blog-posts/hoverflies/index.html",
    "href": "blog-posts/hoverflies/index.html",
    "title": "Un-sung Pollination Hero",
    "section": "",
    "text": "Half the size of your average bee, named for their curious hovering flight, and master’s of Batesian mimicry, hoverflies are gentle bee look-alikes and essential pollinators. Globally, there are thousands of hoverfly species all helping to pollinate over 70% of wild plant species, and are second only to wild bees in pollination efficiency.1 They don’t sting or bite, and their larvae eat aphids and other small garden pests!\nPerhaps the most striking is their long-distance pollen transfer. Unlike bees, which rarely travel farther than 1-2km from their home nests, hoverflies are known to be highly migratory, some even travelling distances comparable to monarch butterfly migration. Studies based in the UK have shown that hoverflies may cover hundreds of kilometers in a single day, even over open water, facilitating gene flow between plant populations that may otherwise remain unconnected.2\nHowever, despite these crucial ecosystem services, they are often underappreciated when compared to other pollinator species such as bees and wasps.3\nUsing long term plant-pollinator interaction data from the HJ Andrews Experimental Forest, I wanted to showcase hoverflies while comparing them to a big time pollination star, bumble bees. To do so, I created an infographic that addresses the following questions:\n\nHow do hoverflies compare to bumble bees as pollinators?\n\nOther than bees, who are the busiest pollinators?\nHow do hoverflies shine in ways that bees don’t?\nWhat meadow species do bumble bees and hoverflies pollinate the most?\n\n\nYou can check out the full data here!\n\n\n\n\n\nMy final infographic is made up of 3 plots, all of which were built using a combination of ggplot and Affinity Designer. Let’s break it down and walk through my decision making for each aspect of the vizualization!\n\n\nWhen I chose this data set, I was excited by the idea of making cute, flowery viz. I thought it would be so fun to make a flower shaped pie chart where each petal was sized congruently with its value. As we’ve learned throughout the quarter, volume can be tricky to interpret, so in order for that plot to work, there needed to be a big enough difference between my groups. The main takeaway from this plot is that hoverflies are the biggest group, and luckily that is clear in the visualization.\nIn ggplot, I used a totally void theme with the plan to use annotations and body text in place of traditional axes and titles. I also intentionally ordered the petals from largest to smallest, starting with the largest petal facing about 1 o’clock, and moving clockwise from there. This draws the readers eye to the largest petal first, centering hoverflies.\nComing out of ggplot, I had a very bare visualization, ready to be annotated:\n\n\n\n\n\nNext, I moved into Affinity Designer, where I added all of my text and annotations. Annotating each petal with the pollinator type, the number of times they were observed pollinating, and using bold and highlighted text to emphasize petals representing hover flies, I aimed to make it super easy to see that hover flies were the most observed pollinator.\nHere is that polished plot, annotated in Affinity:\n\n\n\n\n\n\n\n\nNext, I wanted to make a super simple map that would both contextualize where the data came from, and how far hoverflies can carry pollen. For this, I used tmap rather than ggplot. Starting with a super simple outline of Oregon, I layered on an X marking the data collection sites, and a 100km buffer surrounding that point representing the distance that hoverflies can travel.\nHere is what I came up with using tmap:\n\n\n\n\n\nI finished up this map in Affinity Designer. Again, aiming to keep this one super simple, I added two annotations to label the meadow sites and the hover fly radius. This, combined with the body text in the infographic, conveys a clear message that hoverflies can pollinate over impressive distances, while giving some context to the data itself.\nHere is a look at the final map:\n\n\n\n\n\n\n\n\nFinally, my favorite piece of the infographic. I wanted to show side by side that hoverflies and bumble bees prefer different plants. Starting in ggplot, I created two lollipop charts, showing the species that each pollinator visited the most ordered from #1 to #3. For this plot, I used a mostly blank theme, but kept the axis labels and horizontal grid lines to keep the chart feel and provide context to what I mean by “favorite”.\nHere were my charts coming out of ggplot, ready for Affinity magic:\n\n\n\n\n\n\n\n\n\n\n\n\n\nAgain, I moved over to Affinity for the finishing touches. For this I had big plans, wanting to make each line look like the species they represented. I was able to find beautiful illustrations online (check out the artists listed in the footer of my infographic!) and overlay the lines with the flowers themselves. I was careful to make sure that the heights of the flowers lined up with the heights of the bars. Next, I used arrows and annotations to point out that the species that bumble bees pollinate the most is the 3rd most common meadow flower, while the species that hover flies pollinate the most is the 18th most common!\nI love the way this one turned out, giving a taste of our beautiful blooming Western Cascade meadows:\n\n\n\n\n\n\n\n\nAlready settled on my graphic forms, text, and plot themes, it was time to think about colors, typography, general design, contextualizing my data, centering my primary message, and accessibility.\n\n\nI aimed to have the colors feel light and springy, while also matching colors typically found on a hoverfly. I made my own color palette, leaning into using pinks and oranges. Since I made my own palette, I made sure that the colors were color blind friendly:\n\n\n\n\n\nThe colors weren’t perfectly color blind friendly, but I was careful to make sure that I never relied solely on color to communicate any important messages.\nI also knew that though I didn’t want a stark white background, I did want it to be quite light. I settled on a slight pink, which I think compliments the flower illustrations nicely.\nFor the first time, I found choosing a font easier than choosing colors! For all of the font families, I used Quicksand, which I found to feel quite flowery while still being simple and easy to read. I also chose to use bolded, highlighted text throughout my infographic, to help the reader focus on the key messages.\n\n\n\nDesigning the layout of my infographic to avoid information overload was the most challenging part of building this visualization. I tried to avoid this by keeping each of my individual plots quite simple. I also formatted all of the text absolutely necessary to read as titles, while anything extra I made a bit smaller, giving the reader the option to skim if need be.\nI found ways to subtly contextualize the data throughout the infographic. The first and most obvious place is in the main subtitle, where I state that we are comparing hoverflies and bees “in Western Oregon meadows”. The next place I try and bring the data back into context is in the map, where I use the study sites to contectualize how far hoverflies can pollinate. Lastly, I use the two annotations in the last plot to say how common each pollinators favorite plant was in “our” meadows, subtly reminding the viewer that the data is coming from one place.\nFinally, I wanted to find a way to help the reader move sequentially through each piece of the infographic. My primary messages, that hoverflies are busy and abundant pollinators that can travel long distances and pollinate different species than bees, are best communicated in that order. To do this, I have a hoverfly “flying” through the infographic, starting at the very top next to the main title and travelling down, making stops at each of my 3 plots. I felt that this was a fun way to guide the viewer, giving the eye something to follow and drawing attention to my key messages.\n\n\n\nIt’s always essential to consider accessibility and DEIJ when communicating about data. I already touched on ensuring that my color palette was color blind friendly, and in addition to this I embedded alt text to all of my images.\n\n\n\n\nDrop down this folded code chunk to see the code used to create these plots\n\n\nSee the code\n# Load packages ----\nlibrary(tidyverse)\nlibrary(janitor)\nlibrary(here)\nlibrary(showtext)\nlibrary(tmap)\nlibrary(spData)\nlibrary(sf)\n\n# Read in pollinator data ----\npp_interactions &lt;- read_csv(here(\"data\", \"pp-interactions.csv\")) |&gt;\n  clean_names()\n\n################################ Petal Plot ################################\n\n# Add a column with pollinator generic type to group hover flies together ----\npp_interactions &lt;- pp_interactions |&gt;\n  mutate(pol_type = case_when(str_detect(vissp_type, \"beetle\") ~ \"Beetle\",\n                              str_detect(vissp_type, \"hover-fly\") ~ \"Hover Fly\",\n                              str_detect(vissp_type, \" fly\") ~ \"Fly\",\n                              str_detect(vissp_type, \"wasp\") ~ \"Wasp\",\n                              str_detect(vissp_type, \"butterfly\") ~ \"Butterfly\",\n                              str_detect(vissp_type, \"grasshopper\") ~ \"Grasshopper\",\n                              str_detect(vissp_type, \"moth\") ~ \"Moth\",\n                              str_detect(vissp_type, \"hummingbird\") ~ \"Hummingbird\",\n                              str_detect(vissp_type, \"social\") ~ \"Social Bee\",\n                              str_detect(vissp_type, \"solitary\") ~ \"Solitary Bee\",\n                              str_detect(vissp_type, \"ant\") ~ \"Ant\",\n                              str_detect(vissp_type, \"spider\") ~ \"Spider\",\n                              .default = \"other\"))\n\n# Wrangle data for petal plot ---- \npetal_plot_data &lt;- pp_interactions |&gt; \n  \n  # Remove 2021, as only bees were sampled in this year\n  filter(year != 2021) |&gt;\n  \n  # Filter out bees and \"other\" pollinators\n  filter(pol_type != \"other\" & pol_type != \"Social Bee\" & pol_type != \"Solitary Bee\") |&gt;\n  \n  # Count total visits per pollinator\n  group_by(vissp_type) |&gt;\n  summarize(visits = sum(no_int, na.rm = TRUE)) |&gt;\n  ungroup() |&gt;\n  \n  # Pull out the top 5 busiest pollinators\n  slice_max(order_by = visits, n = 5)\n\n# Font\nfont_add_google(name = \"Quicksand\", family = \"quicksand\")\nshowtext_auto()\n\n# Define number of petals and petal angle\npetals = 5\npetal_angle = 360/petals\n\n# Plot\npetal_plot_data |&gt;\n  \n  # Calculate angles and radii\n  mutate(petal = row_number(),\n         theta0 = petal * petal_angle) |&gt;\n  reframe(theta = theta0 + c(0, -petal_angle/2,  0, \n                             petal_angle/2, 0),\n          r = visits * c(0, 0.6, 1, 0.6, 0), .by = c(vissp_type, visits, petal, theta0)) |&gt; \n  \n  # Plot theta and r and group by petal no. \n  ggplot(aes(theta, r, group = petal)) +\n  ggforce::stat_bspline(geom = \"area\", n = 1000, fill = \"#E195AB\", ) +\n  coord_radial() +\n  theme_void() +\n  theme(\n    plot.title = element_text(family = \"quicksand\",\n                              face = \"bold\", \n                              hjust = 0.5, \n                              size = 18),\n    plot.subtitle = element_text(family = \"quicksand\",\n                                 hjust = 0.5),\n    plot.background = element_rect(fill = \"white\", color = \"white\")\n  )\n\n################################ Map ################################\n\n# Grab Oregon basemap ----\noregon &lt;- us_states |&gt;\n  filter(NAME == \"Oregon\")\n\n# Define region with the coordinates from metadata (min_lat, min_lon, max_lat, max_lon) ----\nmin_lat &lt;- 44.20308930 \nmin_lon &lt;- -122.15208820    \nmax_lat &lt;- 44.28020840    \nmax_lon &lt;- -122.12605670 \n\n# Create a box of the study region ----\nbbox &lt;- st_sfc(st_polygon(list(matrix(c(min_lon, min_lat,\n                                        min_lon, max_lat,\n                                        max_lon, max_lat,\n                                        max_lon, min_lat,\n                                        min_lon, min_lat), \n                                      ncol = 2, byrow = TRUE))), crs = st_crs(oregon))\n\n# Find the centroid of the box ----\ncentroid &lt;- st_centroid(bbox, crs = st_crs(oregon))\n\n# Create buffers around centroid for bee and hover fly ----\n# Transform to a projected crs\ncentroid_projected &lt;- st_transform(centroid, crs = 26910)\n\n# Create a 1km buffer (1000 meters)\nbee_buffer &lt;- st_buffer(centroid_projected, dist = 1000) |&gt;\n  st_transform(crs = st_crs(oregon))\n\n# Create a 100km buffer (100000 meters)\nfly_buffer &lt;- st_buffer(centroid_projected, dist = 100000) |&gt;\n  st_transform(crs = st_crs(oregon))\n\n# Map ----\ntm_shape(oregon) +\n  tm_fill(col = \"#FDFAFB\") +\n  tm_borders(lwd = 5, col = \"#666666\") +\n  tm_layout(frame = FALSE) +\n  tm_shape(fly_buffer) +\n  tm_borders(col = \"#CB904A\", lwd = 4) +\n  tm_shape(centroid) +\n  tm_dots(col = \"#E195AB\", shape = 4, size = 1, border.lwd = 5) +\n  tm_shape(bee_buffer) +\n  tm_fill(col = \"black\", border.lwd = 2)\n\n\n################################ Favorite Flowers Plot ################################\n\n# Create a pollinator data frame that only includes bumble bees and hover flies ----\nhvb &lt;- pp_interactions |&gt;\n  filter(year != 2021) |&gt;\n  filter(str_detect(vissp_type, \"hover-fly\") | str_detect(vissp_name, \"Bombus\")) |&gt;\n  mutate(pollinator = case_when(str_detect(vissp_type, \"hover-fly\") ~ \"Hover-fly\",\n                                str_detect(vissp_type, \"bee\") ~ \"Bee\")) |&gt;\n  group_by(pltsp_code, pollinator) |&gt;\n  summarise(visits = sum(no_int, na.rm = TRUE)) |&gt;\n  ungroup()\n\n# Lollipop chart for bees ----\nhvb |&gt;\n  filter(pollinator == \"Bee\") |&gt;\n  slice_max(order_by = visits, n = 3) |&gt;\n  mutate(rank = c(\"A\", \"B\", \"C\")) |&gt;\n  ggplot(aes(x = rank, y = visits)) +\n  geom_point(fill = \"#ECCED7\") +\n  geom_linerange(aes(ymin = 0, ymax = visits)) +\n  labs(y = \"Number of flower visits\") +\n  scale_x_discrete(labels = c( \"#1. Nuttail's Larkspur\", \n                               \"#2. Blue Thimble Flower\", \n                               \"#3. Mountain Owl's Clover\")) +\n  scale_y_continuous(labels = scales::label_comma()) +\n  theme_minimal() +\n  theme(\n    # Axis labels\n    axis.title.x = element_blank(),\n    axis.title.y = element_text(family = \"quicksand\", margin = margin(10,15,0,10),\n                                size = 40),\n    axis.text.x = element_text(size = 40, family = \"quicksand\", face = \"bold\"),\n    axis.text.y = element_text(size = 40, family = \"quicksand\"),\n    \n    # Grid lines\n    panel.grid.major.x = element_blank(),\n    panel.grid.minor = element_blank(),\n    \n    # Margins\n    plot.margin = margin(10, 10, 10, 10),\n    plot.background = element_rect(color = \"white\", fill = \"white\")\n  )\n\n# Lollipop chart for flies ----\nhvb |&gt;\n  filter(pollinator == \"Hover-fly\") |&gt;\n  slice_max(order_by = visits, n = 3) |&gt;\n  mutate(rank = c(\"A\", \"B\", \"C\")) |&gt;\n  ggplot(aes(x = rank, y = visits)) +\n  geom_point(fill = \"#ECCED7\") +\n  geom_linerange(aes(ymin = 0, ymax = visits)) +\n  labs(y = \"Number of flower visits\") +\n  scale_x_discrete(labels = c( \"#1. Gray's Licorice Root\",\n                               \"#2. Oregon Sunshine\", \n                               \"#3. Blue Thimble Flower\" )) +\n  scale_y_continuous(labels = scales::label_comma(),\n                     breaks = c(0, 1000, 2000, 3000, 4000)) +\n  theme_minimal() +\n  theme(\n    # Axis labels\n    axis.title.x = element_blank(),\n    axis.title.y = element_text(family = \"quicksand\", margin = margin(0,15,0,0),\n                                size = 40),\n    axis.text.x = element_text(size = 40, family = \"quicksand\", face = \"bold\"),\n    axis.text.y = element_text(size = 40, family = \"quicksand\"),\n    \n    # Grid lines\n    panel.grid.major.x = element_blank(),\n    panel.grid.minor.x = element_blank(),\n    \n    # Margins\n    plot.margin = margin(10, 10, 10, 10),\n    plot.background = element_rect(color = \"white\", fill = \"white\")\n  )"
  },
  {
    "objectID": "blog-posts/hoverflies/index.html#footnotes",
    "href": "blog-posts/hoverflies/index.html#footnotes",
    "title": "Un-sung Pollination Hero",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nDoyle, T., Hawkes, W. L., Massy, R., Powney, G. D., Menz, M. H., & Wotton, K. R. 2020. Pollination by hoverflies in the Anthropocene. Proceedings of the Royal Society B: Biological Sciences, 287(1927), 20200508.↩︎\nWotton K. R., Gao B., Menz M. H. M., Morris R. K. A., Ball S. G., Lim K. S., Reynolds D. R., Hu G., Chapman J. W. 2019. Mass seasonal migrations of hoverflies provide extensive pollination and crop protection services. Curr. Biol. 29, 2167-2173.e5.↩︎\nChisausky, J. L., Soley, N. M., Kassim, L., Bryan, C. J., Miranda, G., Gage, K. L., and Sipes, S. D. 2020. Syrphidae of Southern Illinois: Diversity, floral associations, and preliminary assessment of their efficacy as pollinators. Biodiversity Data Journal, 8, e57331.↩︎"
  },
  {
    "objectID": "blog-posts/2024-10-18-my-first-post/index.html",
    "href": "blog-posts/2024-10-18-my-first-post/index.html",
    "title": "blog post title",
    "section": "",
    "text": "I’m going to insert a footnote here1"
  },
  {
    "objectID": "blog-posts/2024-10-18-my-first-post/index.html#this-is-my-first-section",
    "href": "blog-posts/2024-10-18-my-first-post/index.html#this-is-my-first-section",
    "title": "blog post title",
    "section": "",
    "text": "I’m going to insert a footnote here1"
  },
  {
    "objectID": "blog-posts/2024-10-18-my-first-post/index.html#this-is-my-second",
    "href": "blog-posts/2024-10-18-my-first-post/index.html#this-is-my-second",
    "title": "blog post title",
    "section": "This is my second",
    "text": "This is my second\nHere’s my next paragraph2\nI’m citing Sam [1]\nHere is more random text. I’m going to cite a journal article now. [2]"
  },
  {
    "objectID": "blog-posts/2024-10-18-my-first-post/index.html#footnotes",
    "href": "blog-posts/2024-10-18-my-first-post/index.html#footnotes",
    "title": "blog post title",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nHere is a new footnote↩︎\nHere is my second footnote↩︎"
  }
]